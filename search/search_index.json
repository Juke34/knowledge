{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my little collection of cheat sheets / overviews / summaries in bioinformatics and related fields","text":""},{"location":"#wo-i-am","title":"Wo I am?","text":"<p>Jacques Dainat  </p> <ul> <li> Juke34</li> <li> @JacquesDainat</li> <li> ResearchGate</li> <li> https://orcid.org/0000-0002-6629-0173</li> <li> @jacquesdainat@genomic.social</li> <li> in/jacques-dainat-02257376</li> </ul> <p>I studied Bioinformatics at the Science University of Montpellier (France), and obtained a Phd in Bioinformatics, Structural biochemistry and Genomics at the Marseille University (France). During my Phd I focused on the analysis and the detection of unitary pseudogenes in eukaryotes. For this purpose, I developed expert system modules that generate and analyse heterogeneous data (e.g phylogenetic trees, protein predictions, sequence ancestral reconstructions, sequence comparisons, parsimony reconstruction of events, etc.). This approach allowing detecting loss and pseudogenization events occurred during evolution and also detecting intact genes not yet annotated (see here and here. I was equally involved in the creation and analysis of phylome of the chordata proteome (see here).  </p> <p>The year after my PhD I was PostDoc at The French National Institute of Higher Education in Agricultural Sciences. My work focused on the detection of positive selection at large scale among angiosperm genomes thanks to an original method. The aim was to study the impact of recurrent gene duplication on adaptation of plant genomes (see here). I also worked on the highlight of the species tree of Triticeae (see here).  </p> <p>I choose to move to Sweden to join NBIS in 2014 as expert in genome annotation. I was performing functional and structural gene annotation in genomes of any type of organisms (e.g. plants, animals, fungi, bacteria) and many other surrounded tasks like genome assembly, transcriptome assembly, abinitio training, manual curation, data submission, cluster administration, etc. A large part of my time was dedicated to the development of tools and pipelines (AGAT, EMBLmyGFF3, GUESSmyLT, etc.). I was also involved in NBIS training activities in Sweden. As part of Elixir I also have teached Genome Annotation and Assembly in different European coutries.  </p> <p>In 2020 I moved back to France in Montpellier to join Alcediag in the CNRS-ALCEDIAG joint research unit. Alcediag is a precision diagnostics company focusing primarily on mental health, which uses epitranscriptomics analysis. We develops and commercialises blood-based diagnostic solutions for mental health. I have been part of the development of EDIT-B/myEDIT-B a diagnostic blood test to differentiate between depression and bipolar disorder.  </p> <p>In 2023 I decided to join the French National Research Institute for Sustainable Development (IRD) still in Montpellier, to be a driving force in the MIVEGEC unit's bioinformatics transition. There I'm part of the bioinformatics platform iTrop and also implied in the Southgreen platform.</p> <p>A along this time I've been involved in a number of interesting projects and communities bioconda, BeeBiome consortium, biostars, etc.  </p>"},{"location":"bioinformatics/data_visualisation/","title":"Visualisation","text":"<ul> <li> <p>Orange: Data Mining Fruitful and Fun</p> </li> <li> <p>Data Visualization Type Catalogs (from Yuri Engelhardt)</p> <ul> <li>Classic</li> <li>Thorough</li> <li>R</li> <li>Python</li> <li>FT Vocab</li> <li>Searched</li> <li>Tools</li> <li>Weird</li> </ul> </li> <li> <p>Some blog posts on specific data types (from James Scott-Brown):</p> <ul> <li>Distributions (16 ways)</li> <li>Graphs (6 ways)</li> <li>Two numbers (45 ways)</li> <li>Proportions (9 ways)</li> <li>Change over time (11 ways)</li> </ul> </li> <li> <p>Circular plots</p> <ul> <li>circlize: circular visualization in R</li> <li>circos plots</li> </ul> </li> <li> <p>ClustVis a web tool for visualizing clustering of multivariate data</p> </li> </ul>"},{"location":"bioinformatics/taxonomic_classification/","title":"Taxonomic classification","text":"<p>List of tools to perform Taxonomic classification</p> year Name Publication method Reads Contigs branch of life comment kraken x x 2016 Kaiju kmer based x x depend DB used give a txt file, that can be used in KronaChart / Krona tool QIIME2 x ? MetaPhlAn ? ? Clark method based on a supervised sequence classification using discriminative k-mers. x x http://clark.cs.ucr.edu blastn + MEGAN x x diamond + MEGAN x x BBSketch x x BBSketch does taxonomic classification of contigs or reads. However, it does not weight contigs by the number of reads used <p>? means it has to be checked.</p> <p>see here for a nice review of few of these tools</p>"},{"location":"bioinformatics/variant_annotation/","title":"Variant annotation","text":"<p>3 main tools exists :   </p> <ul> <li>Annovar</li> <li>snpEff </li> <li>VEP</li> </ul> <p>Choice of transcripts and software has a large effect on variant annotation, so choice in tool or reference annotation can be hard to do. Here a nice blog providing good insights. A new tool entered in the game called openCRAVAT. Official doc is here and the github account is here. Extra information can be found here.</p>"},{"location":"bioinformatics/annotation/structural/annotation_tools_genome/","title":"List of genome annotation tools","text":"year Tool name Publication Type Method Organism Comments 1991 GRAIL E. C. Uberbacher and R. J. Mural (1991), \"Locat- ing protein-coding regions in human DNAsequences by a multiple sensor-neural network approach\", Proc. Natl. Acad. Sci. USA,Vol. 88, pp. 11261- 11265.R. J. Mural, J. R. Einstein, X. Guan, R. C. Mann and E. C. Uberbacher(1992), \"All Artificial Intelli- gence Approach to DNASequence Feature Recogni- tion\", Trend in Biotechnology, 10, pp. 66 - 69. Ab initio (sensors + Neural network) No longer supported 1991 NetGene Brunak, S., Engelbrecht, J., and Knudsen, S. (1991). Prediction of human mRNA donor and acceptor sites from the DNA sequence. J. Mol. Biol. 220, 49\u201365. Ab initio 1992 GeneID Guigo, R., Knudsen, S., Drake, N., and Smith, T. (1992), Prediction of gene structure J. Mol. Biol. 226, 141\u2013157. Ab initio WAM, HMM, PD, AD, NN 1992 GeneID+ Guigo, R., Knudsen, S., Drake, N., and Smith, T. (1992), Prediction of gene structure J. Mol. Biol. 226, 141\u2013157. Hybrid WAM, HMM, PD, AD, NN use information  from  protein  sequence  database  searches 1992 SORFIND Hutchinson, G. B., and Hayden, M. R. (1992) Nucleic Acids Res. 20, 3453\u20133462. Abinitio 1993 Genemark Borodovsky and McIninch Ab initio 1993 Geneparser Snyder, E.E. and Stormo, G.D. 1993. Identification of coding regions in genomic DNA sequences: an application of dynamic programming and neural networks. Nucleic Acids Res. 21: 607-613. Ab initio DP combined with a neural network program 1994 GRAIL-II Recognizing exons in genomic sequence using GRAIL II. Xu Y, Mural R, Shah M, Uberbacher E. Genet Eng (N Y). 1994; 16():241-53. Ab initio 1994 Xpound Thomas,A. and Skolnick,M.H. (1994) A probabilistic model for detecting coding regions in DNA sequences. IMA J. Math. Appl. Med. Biol., 11, 149\u2013160. Ab initio 1994 EcoParse Ab initio HMM Prokaryote 1994 GeneLang / GenLang Dong, S. and Searls, D.B. 1994. Gene structure prediction by linguistic methods. Genomics 23: 540-551. Ab initio Linguistic method HMM, PD, WAM Eukaryote 1995 Fgeneh (Find gene in human) / GeneFinder Solovyev VV, Salamov AA, Lawrence CB (1995) Identification of human gene structure using linear discriminant functions and dynamic programming. Proceedings/International Conference on Intelligent Systems for Molecular Biology; ISMB International Conference on Intelligent Systems for Molecular Biology 3: 367\u2013375 Ab initio HMM, DP, LDA Human Finds single exon only 1995 Geneparser2 Snyder EE, Stormo GD J Mol Biol. 1995 Apr 21; 248(1):1-18. Ab initio DP combined with a neural network program 1995 Geneparser3 Snyder EE, Stormo GD J Mol Biol. 1995 Apr 21; 248(1):1-18. hybrid DP combined with a neural network program 1996 GeneHacker Yada.T , Hirosawa.M DNA Res., 3, 335-361 (1996). Syst. Mol. Biol. pp.252-260 (1996). Syst. Mol. Biol. pp.354-357 (1997)..\u00a0 ab initio Markov model Prokaryote 1996 Genie Kulp, D.; Haussler, D.; Reese, M. G.; and Eeckman, F. H. 1996. A generalized hidden Markov model for the recognition of human genes in DNA. In D.J. States et al., ed., Proc. Conf. on Intelligent Systems in Molecular Biology, 134\u2013142. Menlo Park, CA: AAAI Press.\u00a0 Hybrid GHMM + neural networks 1996 Procrustes Gene recognition via spliced sequence alignment. Gelfand MS, Mironov AA, Pevzner PA. Proc Natl Acad Sci U S A. 1996 Aug 20; 93(17):9061-6. Evidence based 1997 Fgenes / GeneFinder Solovyev\u00a0 Ab initio HMM, DP, LDA Human 1997 GenScan Burge, C. (1997). Identification of genes in human genomic DNA. Ph.D. thesis, Stanford University. ; Burge, C. &amp; Karlin, S. (1997). Prediction of complete gene structures in genomic DNA. Journal of Molecular Biology, 268,78\u201394 Ab initio GHMM GENSCAN++ is a reimplementation of GENSCAN in C++ (~2001) 1997 MZEF Identification of protein coding regions in the human genome by quadratic discriminant analysis. Zhang MQ. Proc Natl Acad Sci U S A. 1997 Jan 21; 94(2):565-8. Quadratic discriminant analysis 1997 HMMGene Krogh A. Two methods for improving performace of a HMM and their application for gene finding. In: Gaasterland T, Karp P, Karplus K, Ouzounis C, Sander C, Valencia A, editors. The fifth international conference on intelligent Systems for Molecular Biology. CA: Menlo Park: AAAI Press; 1997. pp. 179\u2013186. Ab initio CHMM Vertebrate and C. elegans No download version. Webserver. 1997 GeneWise (from Wise2 distribution) unplublished. Birney, E. and Durbin, R. 1997. Wise2. http://www.sanger.ac.uk/Software/Wise2. Evidence based 1997 AAT (Analysis and Annotation Tool) Huang et al. Evidence based Include two paris of programs DPS/NAP and DDS/GAP 1998 Orpheus Frishman D, Mironov A, Mewes HW, Gelfand M (1998) Combining diverse evidence for gene recognition in completely sequenced bacterial genomes. Nucleic Acids Res 26:2941\u20132947 abinintio + evidence Seed and extend Prokaryote / Archaea 1998 SIM4 A computer program for aligning a cDNA sequence with a genomic DNA sequence. Florea L, Hartzell G, Zhang Z, Rubin GM, Miller W. Genome Res. 1998 Sep; 8(9):967-74. 1998 GIN Y. Cai and P. Bork, \u201cHomology-based gene prediction using neural nets, Analytical Biochemistry, vol. 265, no. 2, pp. 269\u2013274, 1998. Hybrid NN + homology Vertebrate 1998 GAIA GAIA: framework annotation of genomic sequence. Bailey LC Jr, Fischer S, Schug J, Crabtree J, Gibson M, Overton GC. Genome Res. 1998 Mar; 8(3):234-50. homology-based 1998 MORGAN (Multi-frame Optimal Rule-based Gene ANalyzer) Salzberg S, Delcher AL, Fasman KH, Henderson J. J Comput Biol. 1998 Winter; 5(4):667-80. Abinitio DP algorithm in combination with a decision tree program Hybrid tool combining decision trees with dynamic programming and signal sensor algorithm 1998 GeneMark.hmm Lukashin, A. V &amp; Borodovsky, M. GeneMark.hmm: new solutions for gene finding. Nucleic Acids Res. 26, 1107\u20131115 (1998). Ab initio HMM. Iteratively trains and improves the model in an unsupervised manner Prokaryote / Archaea Self training 1998 Glimmer Salzberg, S., Delcher, A., Kasif, S., and White, O. (1998b). Microbialgene identification using interpolated Markov models.Nucleic Ac-ids Res.26(2), 544 \u2013548. Abinitio IMM Prokartyote + Archaea 1999 Fgenesh Solovyev\u00a0and Salamov HMM programs that have organism-specific parameters for human, Drosophila, plants, yeast, and nematode 1999 GlimmerM Salzberg,S.L., Pertea,M., Delcher,A.L., Gardner,M.J. and Tettelin,H. (1999) Interpolated Markov models for eukaryotic gene finding. Genomics, 59, 24\u201331. Abinito IMM Small eukaryote developed to find genes in the malaria parasite Plasmodium falciparum. 1999 Veil (the Viterbi Exon-Intron Locator) Finding Genes in Human DNA with a Hidden Markov Model. J. Henderson, S.L. Salzberg, and K. Fasman. This describes the VEIL system for finding genes. Journal of Computational Biology 4:2 (1997), 127-141. HMM Eukaryote 1999 CRITICA (Coding Region Identification Tool Invoking Comparative Analysis) Badger and Olsen. Molecular Biology and Evolution, 16(4):512-524. 1999. Comparative Prokaryote / Archaea Comparative analysis is based on amino acid sequence similarity to other species 2000 Fgenesh+ Salamov AA, Solovyev VV Genome Res. 2000 Apr; 10(4):516-22.; Solovyev V.V. (2007) Statistical approaches in Eukaryotic gene prediction. In Handbook of Statistical genetics (eds. Balding D., Cannings C., Bishop M.), Wiley-Interscience; 3d edition, 1616 p. HMM plus similar protein-based gene prediction Fgenesh+ is a variant of Fgenesh that takes into account some information about similar proteins 2000 Rosetta Batzoglou et al., 2000 Comparative genomics Two genomes. Uses pairwise genomic alignments to find regions of homology; incorporates a splice junction and exon length model. 2000 CEM Bafna &amp; Huson, 2000 Comparative genomics Two genomes 2001 GenomeScan Computational inference of homologous gene structures in the human genome. Yeh RF, Lim LP, Burge CB, Genome Res. 2001 May; 11(5):803-16. Comparative 2001 Eugene Hybrid Semi-Markov Conditional Random Fields / IMM, DP Plant Can be seen as a combiner because collect information about splice sites and ATG has to be done outside the program. 2001 Twinscan Ian Korf,  Paul Flicek,  Daniel Duan,  Michael R. Brent. Bioinformatics, Volume 17, Issue suppl_1, June 2001, Pages S140\u2013S148, https://doi.org/10.1093/bioinformatics/17.suppl_1.S140 comparative-genomics-based Two genomes. Uses local alignments between a target genome and a reference (informant) genome to identify regions of conservation 2001 GeneHacker Plus Yada,T., Totoki,Y., Takagi,T. and Nakai,K. ( 2001 ) A novel bacterial gene\u2010finding system with improved accuracy in locating start codons. DNA Res.  , 8 , 97 \u2013106 Ab initio HMM Prokaryote 2001 GeneMarkS GeneMarkS: a self-training method for prediction of gene starts in microbial genomes. Implications for finding sequence motifs in regulatory regions. Besemer J, Lomsadze A, Borodovsky M. Nucleic Acids Res. 2001 Jun 15; 29(12):2607-18. Ab initio HMM Prokaryote Self training 2001 SGP-1 (Syntenic Gene Prediction) SGP-1: prediction and validation of homologous genes based on sequence alignments. Wiehe T, Gebauer-Jung S, Mitchell-Olds T, Guig\u00f3 R. Genome Res. 2001 Sep; 11(9):1574-83. Comparative vertebrates and plants Dual genomes. Uses pairwise genomic alignments to find syntenic loci; evaluates a coding and splice model in these loci. 2001 Spidey Spidey: a tool for mRNA-to-genomic alignments. Wheelan SJ, Church DM, Ostell JM. Genome Res. 2001 Nov; 11(11):1952-7. 2002 DOUBLESCAN Meyer IMM, Durbin R. 2002. Comparative ab initio prediction of gene structures using pair HMMs. Bioinformatics 18:1309\u201318 comparative PHMM Uses a pair HMM to simultaneously predict gene structures and conservation in two aligned sequences 2002 AGenDA (Alignment-based Gene-Detection Algorithm) Oliver Rinner and Burkhard Morgenstern. AGenDA: Gene Prediction by Com- parative Sequence Analysis. Silica Biology, 2:4673-4680, 2002. comparative Eukaryote Based on pair-wise alignments created by CHAOS and DIALIGN 2002 GAZE Howe, K. L. et al. GAZE\u202f: A Generic Framework for the Integration of Gene-Prediction Data by Dynamic Programming. 1418\u20131427 (2002). doi:10.1101/gr.149502\u00a0 Comparative / combiner 2002 BDGF Shibuya T, Rigoutsos I (2002) Dictionary-driven prokaryotic gene finding. Nucleic Acids Res 30:2710\u20132725\u00a0 Evidence based Prokaryote / Archaea Classifications based on universal CDS-specific usage of short amino acid \u201cseqlets\u201d 2003 EvoGene Pedersen JS, Hein J. 2003. Gene finding with a hidden Markov model of genome structure and evolution. Bioinformatics 19:219\u201327 Comparative / evolutionary Evolutionary Hidden Markov Model (EHMM) Phylogenetic HMM that performs ab initio prediction of genes across a multiple-sequence alignment (more than two genomes), making use of phylogenetic information 2003 GeneMarkS (virus version) Mills R, Rozanov M, Lomsadze A, Tatusova T, Borodovsky M. Improving gene annotation of complete viral genomes. Nucleic Acids Res. 2003;31(23):7041\u20137055. doi: 10.1093/nar/gkg878. Ab initio HMM Virus Self training 2003 GeneComber Shah SP, McVicker GP, Mackworth AK, Rogic S, Ouellette BF. 2003. GeneComber: combining outputs of gene prediction programs for improved results. Bioinformatics 19:1296\u201397 Combiner EUI, GI and EUI frame algorithms It runs Genscan and HMMgene and combines results 2003 AUGUSTUS Stanke, M. &amp; Waack, S. Gene prediction with a hidden Markov model and a new intron submodel. Bioinformatics 19 Suppl 2, ii215\u2013ii225 (2003). abinitio HMM Eukaryote 2003 SLAM M. Alexandersson, S. Cawley, and L. Pachter. 2003. SLAM: Cross-species gene finding and alignment with a generalized pair hidden Markov model. Genome Res., 13:496-502. Comparative GPHMM (Generalized pair HMM) Eukaryote Dual genome. Treats two alignments in a symmetric way, predicting pairs of transcripts 2003 SGP2 G. Parra, P. Agarwal, J.F. Abril, T. Wiehe, J.W. Fickett, and R. Guigo. 2003. Comparative gene prediction in human and mouse. Genome Res., 13:108-117 comparative Eukaryote Dual genome. It integrates the sequence similarity search program TBLASTX (WU-BLAST) and the ab initio gene finder GeneiD. Used by the Mouse Genome Sequencing Consortium in 2002 to annotate the mouse genome. Uses pairwise genomic alignments to find syntenic loci; evaluates a coding and splice model in these loci. 2003 PASA (Program to Assemble Spliced Alignments) Haas BJ, Delcher AL, Mount SM, Wortman JR, Smith RK Jr., et al. 2003. Improving the Arabidopsis genome annotation using maximal transcript alignment assemblies. Nucleic Acids Res pipeline - combiner - evidence-based Uses alignments of cDNA, EST, or RNA-seq to predict gene structures, including alternative splice events. Can run GMAP and BLAT to do alignment. Can use external gff3 file 2003 EasyGene EasyGene--a prokaryotic gene finder that ranks ORFs by statistical significance. Larsen TS, Krogh A. BMC Bioinformatics. 2003 Jun 3; 4():21. Ab initio HMM, H Prokaryote / Archaea 2003 AMIGene (Annotation of MIcrobial Genes) Bocs, S., Cruveiller, S., Vallenet, D., Nuel, G., Medigue, C. 2003 AMIGene: Annotation of MIcrobial Genes Nucleic Acids Res. 31 3723 \u20133726 Ab initio HMM Prokaryote 2003 ETOPE Anton Nekrutenko,  Wen-Yu Chung,  Wen-Hsiung Li. Nucleic Acids Research, Volume 31, Issue 13, 1 July 2003, Pages 3564\u20133567, https://doi.org/10.1093/nar/gkg597 Comparative / evolutionary based on the ratio of non-synonymous to synonymous substitution rates between sequences from different genomes Eukaryote Based on Genscan output. It doesn't predict exons but rather validate exon predicted by other tools. 2003 CRASA A complexity reduction algorithm for analysis and annotation of large genomic sequences. Chuang TJ, Lin WC, Lee HC, Wang CW, Hsiao KL, Wang ZH, Shieh D, Lin SC, Ch'ang LY. Genome Res. 2003 Feb; 13(2):313-22. 2003 YACOP Tech M, Merkl R (2003) YACOP: enhanced gene prediction obtained by a combination of existing methods. In Silico Biol 3:441\u2013451 combiner: abinitio + evidence Utilizes Glimmer, Critica and ZCURVE Prokaryote / Archaea 2003 ZCurve Guo FB, Ou HY, Zhang CT (2003) ZCURVE: a new system for recognizing protein-coding genes in bacterial and archaeal genomes. Nucleic Acids Res 31:1780\u20131789 abinitio Z curve. correlation of dinucleotides. Prokaryote / Archaea Uses the \u201cZ-transform\u201d of DNA as the information source for classification 2003 Eugene'Hom Foissac S, Bardou P, Moisan A, Cros M, Schiex T. EuGene'Hom: a generic similarity-based gene finder using multiple homologous sequences. Nucleic Acids Res 2003; 31: 3742-3745. Evidence-based Eukaryote 2004 GeneWise GeneWise and Genomewise. Birney E, Clamp M, Durbin R. Genome Res. 2004 May; 14(5):988-95. Hybrid HMM-based gene prediction tool using extrinsic evidence 2004 Ensembl Pipeline Evidence based Pipeline difficult to install in standalone 2004 RescueNet Mahony S, McInerney JO, Smith TJ, Golden A (2004) Gene prediction using the Self-Organizing Map: automatic generation of multiple gene models. BMC Bioinformatics 5:23 Ab initio, evidence Prokaryote, Archaea Unsupervised discovery of multiple gene classes using a self-organizing map. No exact start/stop prediction 2004 Reganor McHardy AC, Goesmann A, Puhler A, Meyer F (2004) Development of joint application strategies for two microbial gene finders. Bioinformatics 20:1622\u20131631 combiner: abintito + evidence Uses Glimmer and Critica Prokaryote / Archaea 2004 Combiner Allen, J.E., et al. 2004. Computational gene prediction using multiple sources of evidence. Genome Res.  14142\u2013148 combiner Linear Combiner that uses a voting function; statistical scoring method that uses decision trees Three different algorithms for combining evidence in the Combiner were implemented 2004 GlimmerHMM Majoros, W.H., Pertea, M.,and Salzberg, S.L. TigrScan and GlimmerHMM: two open-source ab initio eukaryotic gene-finders Bioinformatics 2004 2878-2879. Ab initio GHMM eukaryote 2004 GeneZilla (formerly \"TIGRscan\") Majoros, W.H., Pertea, M.,and Salzberg, S.L. TigrScan and GlimmerHMM: two open-source ab initio eukaryotic gene-finders Bioinformatics 2004 2878-2879. Ab initio GHMM eukaryote No longer supported 2004 SNAP (Semi-HMM-based Nucleic Acid Parser) Korf, I. Gene finding in novel genomes. BMC Bioinformatics 5, 59 (2004) Ab initio semi-HMM 2004 Projector Meyer IM, Durbin R. 2004. Gene structure conservation aids similarity based gene prediction. Nucleic Acids Res. 32:776\u201383 comparative PHMM Similar to DOUBLESCAN but extends the model to make use of annotation information on one sequence to inform the other 2004 ExoniPhy Siepel A, Haussler D. 2004. Computational identification of evolutionarily conserved exons. In Proceedings of the Eighth Annual International Conference on Research in Computational Molecular Biology, ed.Gusfield D, Bourne P, Istrail S, Pevzner P, Waterman M, pp. 177\u201386. New York: Assoc. Comput. Mach. Comparative / evolutionary phylo-HMM Phylogenetic HMM that performs ab initio predictions across a multiple-sequence alignment 2005 ExonHunter Bronislava Drejova. Evidence Combination in Hidden Markov Models for Gene Prediction. PhD thesis, the University of Waterloo, 2005. Broii.a Brejova, Daniel G. Brown, Ming Li, and Tomas Vinaf. ExonHunter: a comprehensive approach to gene finding. Bioinformatics, 21 Suppl. 1:i57- i65, 2005. Comparative + evidence driven GHMM use genomic sequences, expressed sequence tags and protein databases of related species 2005 JIGSAW Jonathan E. Allen and Steven L. Salzberg. JIGSAW: Integration of Multiple Sources of Evidence for Gene Prediction. Bioinformatics, 21:3596- 3603, 2005. Combiner GHMM-like algorithm select the prediction whose structure best represents the consensus 2005 AIR Florea L, Di Francesco V, Miller J, Turner R, Yao A, et al. 2005. Gene and alternative splicing annotation with AIR. Genome Res. evidence Integrates multiple forms of extrinsic evidence to perform alternative splice junction prediction 2005 GeneMark-ES Lomsadze, A. Gene identification in novel eukaryotic genomes by self-training algorithm. Nucleic Acids Res. 33, 6494\u20136506 (2005) ; Ter-Hovhannisyan, V., Lomsadze, A., Chernoff, Y. O. &amp; Borodovsky, M. Gene prediction in novel fungal genomes using an ab initio algorithm with unsupervised training. Genome Res. 18, 1979\u20131990 (2008). Ab initio Eukaryote 2005 BGF (Beijing Gene Finder) Li, H. et al. Test data sets and evaluation of gene prediction programs on the rice genome. J Comp Sci Tech 20, 446\u2013453 (2005). Ab initio semi HMM Plant (Eukaryote in general?) 2005 TWAIN Majoros WH, Pertea M, Salzberg SL. Efficient implementation of a generalized pair hidden Markov model for comparative gene finding. Bioinformatics. 2005;21(9):1782\u20131788. comparative GPHMM Dual genome 2005 GenomeThreader G. Gremme, V. Brendel, M.E. Sparks, and S. Kurtz. Engineering a software tool for gene structure prediction in higher organisms. Information and Software Technology, 47(15):965-978, 2005 Evidence based Similarity All The gene structure predictions are calculated using a similarity-based approach where additional cDNA/EST and/or protein sequences are used to predict gene structures via spliced alignments 2006 MaGe Vallenet D, Labarre L, Rouy Z, Barbe V, Bocs S, Cruveiller S, Lajus A, Pascal G, Scarpelli C, Medigue C: MaGe: a microbial genome annotation system supported by synteny results. Nucleic Acids Res. 2006, 34 (1): 53-65. 10.1093/nar/gkj406. Pipeline Bacteria AMIGene for protein coding, RBSfinder for ribosome,tRNAscan-SE for tRNA, Rfam for small RNAs and riboswitches,etc. The output is a sort of gff3 (not fully compatible. Define only gene and CDS feature. Gene do not have ID and CDS do not have parent attributes but share locus_tag attribute) 2006 DOGFISH (for \u2018detection of genomic features in sequence homologies\u2019) Carter D, Durbin R. 2006. Vertebrate gene finding from multiple-species alignments using a two-level strategy. Genome Biol. 7(Suppl. 1):S6.1\u201312 Comparative HMM vertebrate Two-step program that combines a classifier that scores potential splice sites using a multiple-sequence alignment and an ab initio gene predictor that makes use of the scores from the classifier to predict gene structures. More than two genomes possible. 2006 AUGUSTUS+ Stanke M, Schoffmann O, Morgenstern B, Waack S. Gene prediction in eukaryotes with a generalized hidden Markov model that uses hints from external sources. BMC Bioinformatics. 2006;7:62. Hybrid GHMM or CRF 2006 N-SCAN (a.k.a. TWINSCAN 3.0) Annual International Conference on Research in Computational Molecular Biology RECOMB 2005: Research in Computational Molecular Biology pp 374-388 ; Gross SS, Brent MR. 2006. Using multiple alignments to improve gene prediction. J. Comput. Biol. 13:379\u201393. Comparative Can use more than 2 genomes (Extends the TWINSCAN model to N genomes) 2006 ZCURVE_V ZCURVE_V: a new self-training system for recognizing protein-coding genes in viral and phage genomes. ab initio Z curve Virus self-training 2006 TWINSCAN_EST Wei C, Brent MR: Using ESTs to improve the accuracy of de novo gene prediction. BMC Bioinformatics. 2006, 7: 327-10.1186/1471-2105-7-327. Comparative + Evidence Two genomes 2006 N_Scan_EST Wei C, Brent MR: Using ESTs to improve the accuracy of de novo gene prediction. BMC Bioinformatics. 2006, 7: 327-10.1186/1471-2105-7-327. Comparative + Evidence HMM HMM-based gene prediction tool that makes use of EST and genomic alignments, incorporating phylogenetic information 2006 Metagene Noguchi, H., Park, J. &amp; Takagi, T. MetaGene: prokaryotic gene finding from environmental genome shotgun sequences. Nucleic Acids Res. 34, 5623\u20135630 (2006) ab initio Metagenomic 2006 TiCo An unsupervised classification scheme for improving predictions of prokaryotic TIS. Tech M, Meinicke P. BMC Bioinformatics. 2006 Mar 9; 7():121. Prokaryote clustering algorithm for completely unsupervised scoring of potential TIS, based on positionally smoothed probability matrices. The algorithm requires an initial gene prediction and the genomic sequence of the organism to perform the reannotation 2006 FGENESH++ Solovyev V, Kosarev P, Seledsov I, Vorobyev D. (2006) Automatic annotation of eukaryotic genes, pseudogenes and promoters. Genome Biol. 2006;7 Suppl 1:S10.1-12. Pipeline hybrid: hmm+extrinsinc automated version of FGENESH+ 2007 Conrad DeCaprio, D. et al. Conrad: gene prediction using conditional random fields. Genome Res. 17, 1389\u20131398 (2007). comparative semi-Markov conditional random fields (SMCRFs) first comparative gene predictor based on SMCRFs. Can use more than 2 genomes 2007 Contrast Gross SS, Do CB, Sirota M, Batzoglou S. 2007. CONTRAST: a discriminative, phylogeny-free approach to multiple informant de novo gene prediction. Genome Biol. 8:R269. Comparative CRF,SVM. Combines local classifiers with the global gene structure model. Can also incorporate information from EST alignment. Can use more than 2 genomes. Uses a combination of SVM and CRF predictors, providing a big boost over traditional HMMs 2007 GISMO Krause L, McHardy AC, Nattkemper TW, P\u00fchler A, Stoye J, Meyer F (2007) GISMO\u2014gene identification using a support vector machine for ORF classification. Nucleic Acids Res 35:540\u2013549 Abinitio + evidence SVMs Prokaryote Uses SVMs. Model training is based on \u201creliable\u201d genes found with PFAM protein domain HMMs. Output GFF2 2007 Genomix Coghlan, A. &amp; Durbin, R. Genomix: a method for combining gene-finders' predictions, which uses evolutionary conservation of sequence and intron\u2013exon structure. Bioinformatics 23, 1468\u20131475 (2007). combiner DP eukaryote use dynamic programming to select the best conserved (top-scoring) predicted exons in the query region, and combine them into a gene structure 2007 GLEAN Elsik, C.G. et al. Creating a honey bee consensus gene set. Genome Biol. 8, R13 (2007). combiner HMM Eukaryote use an unsupervised learning method 2007 FLAN Bao Y, Bolotov P, Dernovoy D, Kiryutin B, Tatusova T. FLAN: a web server for influenza virus genome annotation. Nucleic Acids Res. 2007. pp. W280\u2013284. similarity-based Influenza virus 2007 transMap Using native and syntenically mapped cDNA alignments to improve de novo gene finding. Stanke M, Diekhans M, Baertsch R, Haussler D. Bioinformatics. 2008 Mar 1; 24(5):637-44. Zhu J, Sanborn JZ, Diekhans M, Lowe CB, Pringle TH, Haussler D. 2007. Comparative genomics search for losses of long-established genes on the human lineage. PLOS Comput. Biol. 3:e247. Evidence Eukaryote Uses whole-genome alignments to project existing annotations from one genome to one or more other genomes. first developed in conjunction with improvements to AUGUSTUS to model extrinsic information 2007 GLIMMER3 Delcher AL, et al. Identifying bacterial genes and endosymbiont DNA with Glimmer, Bioinformatics , 2007, vol. 23 (pg. 673-679) Abinitio IMM bacteria, arch\u00e6a and viruses It integrates Ribosome binding sites evidence directly into the gene-finding algorithm. It distinguishs host and endosymbiont DNA. 2008 SCGPred SCGPred: a score-based method for gene structure prediction by combining multiple sources of evidence. Li X, Ren Q, Weng Y, Cai H, Zhu Y, Zhang Y Genomics Proteomics Bioinformatics. 2008 Dec; 6(3-4):175-85. Combiner Eukaryote automated eukaryotic gene structure annonator that computes weighted consensus gene structure based on multiple sources of available evidence 2008 RAST Aziz RK,  Bartels D,  Best AA,  DeJongh M,  Disz T,  Edwards RA,  Formsma K,  Gerdes S,  Glass EM,  Kubal M, et al. The RAST Server: rapid annotations using subsystems technology, BMC Genomics , 2008, vol. 9 pg. 75 pipeline bacterial and archaeal Online service that identifies protein-encoding, rRNA and tRNA genes, assigns functions to the genes, predicts which subsystems are represented in the genome, uses this information to reconstruct the metabolic network and makes the output easily downloadable for the user. 2008 Maker Cantarel, B. L. et al. Maker. Genome Res. 18, 188\u201396 (2008). Combiner It uses proteins, transcripts ... Abinitio: Augustus, Fgnesh,Genemark,snap 2008 Evigan Liu, Q., Mackey, A. J., Roos, D. S. &amp; Pereira, F. C. N. Evigan: A hidden variable model for integrating gene evidence for eukaryotic gene prediction. Bioinformatics 24, 597\u2013605 (2008). Combiner Dynamic Bayes networks (DBNs) Eukaryote Choose the best possible set of exons and combine them in a gene model. Weight of different sources. Unsupervised learning method 2008 Y. Zhou, Y. Liang, C. Hu, L. Wang, X. Shi, An artificial neural network method for combining gene prediction based on equitable weights, NeuroComputing 71 (2007) 538\u2013543 combiner RBFN 2008 Evidence Modeler (EVM) Haas, B. J. et al. Automated eukaryotic gene structure annotation using EVidenceModeler and the Program to Assemble Spliced Alignments. Genome Biol. 9, R7 (2008). Combiner choose the best possible set of exons and combine them in a gene model weight of different sources. Evidence based chooser. 2008 Chemgenome2.0 Poonam Singhal, B. Jayaram, Surjit B. Dixit and David L. Beveridge. Prokaryotic Gene Finding based on Physicochemical Characteristics of Codons Calculated from Molecular Dynamics Simulations.Biophysical Journal,2008,Volume:94 Issue:11, 4173-4183 ] Ab initio Procaryote Prokaryotic Gene Finding Based on Physicochemical Characteristics of Codons Calculated from Molecular Dynamics Simulations 2008 MetaGeneAnnotator (MGA) Noguchi H, Taniguchi T, Itoh T (2008) Meta- GeneAnnotator: detecting species-specific patterns of ribosomal binding site for precise gene prediction in anonymous prokaryotic and phage genomes. DNA Res 15:387\u2013396. abinitio Prokaryote MGA is a self-training gene prediction tool for all kinds of prokaryotic genes including atypical genes such as horizontally transferred and prophage-encoded genes 2009 mGene Schweikert, G. et al. mGene: accurate SVM-based gene finding with an application to nematode genomes. Genome Res. 19, 2133\u201343 (2009). Ab initio Structural HMM combined with discrimination training techniques similar to SVMs No longer supported 2009 Orphelia Ab initio Neural network Metagenomic 2009 MiGAP (Microbial Genome Annotation Pipeline ) Sugawara H. et al.  (2009) Microbial genome annotation pipeline (MiGAP) for diverse users. In: Proceedings of the 20th International Conference on Genome Informatics, Yokohama, Japan, S\u2013001\u20131\u20132. Pipeline: MetaGeneAnnotator + tRNAscan-SE + rRNA db Prokaryote 2009 DAWGPAWS Estill, J. C. &amp; Bennetzen, J. L. The DAWGPAWS pipeline for the annotation of genes and transposable elements in plant genomes. Plant Methods 5, 1\u201311 (2009). Eukaryote / Plant pipeline for the annotation of genes and transposable elements in plant genomes 2010 MetaGeneMark Zhu, W., Lomsadze, A. &amp; Borodovsky, M. Ab initio gene identification in metagenomic sequences. Nucleic Acids Res. 38, 1\u201315 (2010). Ab initio HMM Metagenome Self training 2010 Prodigal (PROkaryotic DYnamic programming Gene-finding ALgorithm) Hyatt, D. et al. Prodigal: prokaryotic gene recognition and translation initiation site identification. BMC Bioinformatics 11, 119 (2010) Ab initio dynamic programming + HMM. Log-likelihood coding statistics trained from data. Prokaryote, Metagenome Self training 2010 GenePRIMP Pati A. Ivanova N.N. Mikhailova N. Ovchinnikova G. Hooper S.D. Lykidis A. Kyrpides N.C. GenePRIMP: a gene prediction improvement pipeline for prokaryotic genomes Nat. Methods  2010 7 455457 - - Prokaryote evidence-based evaluation 2010 VIGOR  (Viral Genome ORF Reader) Wang S, Sundaram JP, Spiro D. 2010. VIGOR, an annotation program for small viral genomes. BMC Bioinformatics 11:451. http://dx.doi.org /10.1186/1471-2105-11-451. Evidence Virus: influenza virus, rotavirus, rhinovirus and coronavirus subtypes Web application tool 2010 FragGeneScan Rho M, Tang H, Ye Y (2010) FragGeneScan: predicting genes in short and error-prone reads. Nucleic Acids Res 38:e191 ab initio HMM Metagenome HMM-based. Combines sequencing error models with codon usage 2010 MetaGeneMark Zhu W, Lomsadze A, Borodovsky M (2010) Ab initio gene identification in metagenomic sequences. Nucleic Acids Res 38:e132 abinitio Metagenome Update of GeneMark.hmm with improved model parameters for metagenomic samples 2010 Gnomon Souvorov, A. et al. Gnomon \u2014 the NCBI eukaryotic gene prediction tool. National Center for Biotechnology Information, (2010). Abinitio HMM; Translational and splice signals are described using WMM and WAM models Following the Genscan logic Gnomon recognizes as HMM states coding exons and introns on both strands and intergenic sequence 2011 MAKER2 Holt, C. &amp; Yandell, M. MAKER2: an annotation pipeline and genome-database management tool for second-generation genome projects. BMC Bioinformatics 12, 491 (2011). Pipeline / combiner Evidence or abinitio or abinitio evidence driven Eukaryote / Prokaryote It uses proteins, transcripts ... Abinitio: Augustus, Fgnesh,Genemark,snap 2011 GenSAS Lee T, Peace C, Jung S, Zheng P, Main D, Cho I (2011) GenSAS: an online integrated genome sequence annotation pipeline. In: 4th International conference on biomedical engineering and informatics (BMEI), Shanghai, 2011, pp. 1967\u20131973. doi: 10.1109/BMEI.2011.6098712 pipeline An online integrated genome sequence annotation pipeline 2011 VMGAP (TheViral MetaGenome Annotation Pipeline) Lorenzi, H. A. et al. TheViral MetaGenome Annotation Pipeline(VMGAP): an automated tool for the functional annotation of viral metagenomic shotgun sequencing data. Stand. Genomic Sci. 4, 418\u2013429 (2011). Pipeline Viruses 2012 eCRAIG (ensemble CRAIG) Bernal A, Crammer K, Pereira F: Automated gene-model curation using global discriminative learning. Bioinformatics. 2012, 28 (12): 1571-1578. 10.1093/bioinformatics/bts176. combiner CRF-based 2012 MOCAT Kultima JR, Sunagawa S, Li J, Chen W, Chen H, Mende DR, Arumugam M, Pan Q, Liu B, Qin J (2012) MOCAT: a metagenomics assembly and gene prediction toolkit. PLoS One 7:e47656 pipeline Use Prodigal or MetaGeneMark Metagenome 2013 GIIRA (Gene Identification Incorporating RNA-Seq data and Ambiguous reads) Zickmann F, Lindner MS, Renard BY (2013) GIIRA\u2013RNA-Seq driven gene finding incorporating ambiguous reads. Bioinformatics 30:606\u2013613 abinitio evidence driven maximum-flow approach Eukaryote, Prokaryote Based on the observed mapping coverage, GIIRA identifies candidate genes that are refined in further validating steps. 2013 Eugene-P Next-generation Annotation of Prokaryotic Genomes with EuGene-P: Application to Sinorhizobium meliloti 2011. E. Sallet et al. DNA Res. 2013 Prokaryote 2013 MetaGUN Liu Y, Guo J, Hu G, Zhu H (2013) Gene prediction in metagenomic fragments based on the SVM algorithm. BMC Bioinformatics 14:S12 abinitio SVM-based. Phylogenetic binning and assignment of protein sequences to each bin Metagenome 2014 ZUPLS Song, K., Tong, T., and Wu, F. (2014). Predicting essential genes in prokaryotic genomes using a linear method: ZUPLS. Integr. Biol. 6, 460\u2013469. doi: 10.1039/c3ib40241j ab initio Z-curve Prokaryote 2014 OMIGA (Optimized Maker-Based Insect Genome Annotation) Liu J. Xiao H. Huang S. Li F. OMIGA: Optimized Maker-Based Insect Genome Annotation Mol. Genet. Genomics  2014 289 567 573 pipeline (MAKER) Augustus,Snap,GeneMark Insect 2014 GeneMark-ET Lomsadze, A., Burns, P. D. &amp; Borodovsky, M. Integration of mapped RNA-Seq reads into automatic training of eukaryotic gene finding algorithm. 42, 1\u20138 (2014). Ab initio HMM Eukaryote Self training 2014 Prokka Seemann T., Prokka: rapid prokaryotic genome annotation. Bioinformatics 2014 Jul 15;30(14):2068-9. PMID:24642063 pipeline Ab initio + evidence-based for functional annotation prokaryote Do structural and functional annotation 2014 DFAST (DDBJ Fast Annotation and Submission Tool) Seemann T. (2014) Prokka: rapid prokaryotic genome annotation. Bioinformatics , 30, 2068\u20132069. DFAST: a flexible prokaryotic genome annotation pipeline for faster genome publication. Yasuhiro Tanizawa,  Takatomo Fujisawa,  Yasukazu Nakamura. Bioinformatics, Volume 34, Issue 6, 15 March 2018, Pages 1037\u20131039 Pipeline Prokaryote The original version of DFAST employs the lightweight command-line program Prokka as an annotation engine. Now DFAST uses MetaGeneAnnotator (MGA) by default to predict CDSs and GHOSTX as a default aligner. Standalone and web versions. Data ready to submit to DDBJ 2015 Ipred Zickmann, F. &amp; Renard, B. Y. IPred - integrating ab initio and evidence based gene predictions to improve prediction accuracy. BMC Genomics 16, 134 (2015). Combiner evidence-based choose the best possible set of exons and combine them in a gene model. Evidence based chooser. Can also model gene form evidence only. 2015 GASS ( Genome Annotation based on Species Similarity) GASS: genome structural annotation for Eukaryotes based on species similarity. Wang Y, Chen L, Song N, Lei X. BMC Genomics. 2015 Mar 4; 16():150. comparative shortest path model and DP 2016 BRAKER1 Lange, S., Hof, K., Lomsadze, A., Borodovsky, M. &amp; Stanke, M. BRAKER1\u202f: Unsupervised RNA-Seq-Based Genome Annotation with GeneMark-ET and AUGUSTUS. 24, 2014 (2014). Hybrid / Pipeline Pipeline: GeneMark-ET + Augustus 2016 Companion Steinbiss, S. et al. Companion: a web server for annotation and analysis of parasite genomes. Nucleic Acids Res. 44, W29\u2013W34 (2016) Pipeline for automatic eukaryotic parasite annotation 2016 Gmove Dubarry, M. et al. Gmove a tool for eukaryotic gene predictions using various evidences. F1000Reserach 34, 2011 (2016). Eukaryote 2016 AugustusCGP K\u00f6nig S, Romoth LW, Gerischer L, Stanke M. Bioinformatics. 2016 Nov 15; 32(22):3388-3395. comparative Eukaryote mutiple genomes 2016 CAT Comparative Analysis toolkit Fiddes, I. T. et al. Comparative Annotation Toolkit (CAT)\u2014simultaneous clade and personal genome annotation. Genome Res. https://doi.org/10.1101/gr.233460.117 (2018). pipeline Evidence based, comparative-abinitio (AugustusCGP) takes as input a HAL-format multiple whole genome alignment. Output GFF3 + many plots 2016 CESAR Coding exon-structure aware realigner (CESAR) utilizes genome alignments for accurate comparative gene annotation. Sharma V, Elghafari A, Hiller M. Nucleic Acids Res. 2016 Jun 20; 44(11):e103. comparative Uses a HMM to adjust splice sites in whole-genome alignments, improving transcript projections 2016 PGAP Tatusova T. et al.  (2016) NCBI prokaryotic genome annotation pipeline. Nucleic Acids Res ., 44, 6614\u20136624. pipeline GenemarkS+ Glimmer + extrinsec data Prokaryote This is the NCBI annotation service incorporated in its submission system, but it is only available for GenBank submitters. 2017 \u00a0GeMoMa Keilwagen, J., Hartung, F., Paulini, M., Twardziok, S. O. &amp; Grau, J. Combining RNA-seq data and homology-based gene prediction for plants , animals and fungi. (2017). homology-based gene prediction program 2017 \u00a0funannotate doi.org/10.5281/zenodo.2576527 Pipeline Evidence Modeler + Augustus + GeneMark-ES/ET + evidence + PASA built specifically for fungi, but will also work with higher eukaryotes homology-based gene prediction program 2017 GAWN unpublished - https://github.com/enormandeau/gawn pipeline evidence-based only GMAP to create gene and cufflinks and TransDecoder to add UTR eukaryote 2018 FunGAP Min B, Grigoriev IV, Choi IG. FunGAP: Fungal Genome Annotation Pipeline using evidence-based gene model evaluation. Bioinformatics (Oxford, England). 2017;33(18):2936\u20137. pipeline 2018 BRAKER2 BRAKER2: automatic eukaryotic genome annotation with GeneMark-EP+ and AUGUSTUS supported by a protein database - https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7787252/ Hybrid eukaryote 2018 G-OnRamp Ab-initio Web-based Augustus,GlimmerHMM,SNAP 2018 VIRULIGN VIRULIGN: fast codon-correct alignment and annotation of viral genomes. Pieter J K Libin,  Koen Deforche,  Ana B Abecasis,  Kristof Theys. Bioinformatics, Volume 35, Issue 10, 15 May 2019, Pages 1763\u20131765, https://doi.org/10.1093/bioinformatics/bty851 Similarity Virus 2019 GAAP Jinhwa Kong, Sun Huh, Jung-Im Won, Jeehee Yoon, Baeksop Kim, and Kiyong Kim. GAAP: A Genome Assembly + Annotation Pipeline. BioMed Research International, Volume 2019, Article ID 4767354, 12 pages pipeline Augustus,EVM,MAKER,PASA Genome Assembly + Annotation Pipeline 2019 VAPiD (Viral Annotation Pipeline and iDentification) Ryan C. Shean, Negar Makhsous, Graham D. Stoddard, Michelle J. Lin &amp; Alexander L. Greninger. VAPiD: a lightweight cross-platform viral annotation pipeline and identification tool to facilitate virus genome submissions to NCBI GenBank. BMC Bioinformaticsvolume 20, Article number: 48 (2019) pipeline Virus 2019 Vgas (Viral Genome Annotation System) Kai-Yue Zhang, Yi-Zhou Gao, Meng-Ze Du, Shuo Liu, Chuan Dong, and Feng-Biao Guo. Vgas: A Viral Genome Annotation System. Front Microbiol. 2019; 10: 184. abinitio + similarity-based ZCURVE_V + BLASTp Virus In their paper they say: When combining Vgas with GeneMarkS and Prodigal, better prediction results could be obtained than with each of the three individual programs. 2020 VADR VADR: validation and annotation of virus sequence submissions to GenBank. Alejandro A. Sch\u00e4ffer, Eneida L. Hatcher, Linda Yankie, Lara Shonkwiler, J. Rodney Brister, Ilene Karsch-Mizrachi &amp; Eric P. Nawrocki. BMC Bioinformatics 21, 211 (2020). https://doi.org/10.1186/s12859-020-3537-3 HMM + similarity Virus 2020 esga Nextflow pipeline focused on the use of Augustus De-novo with evidence based Eukaryote effort made by Marc H\u00f6ppner to get the best of Augustus 2020 Helixer Helixer: cross-species gene annotation of large eukaryotic genomes using deep learning - https://doi.org/10.1093/bioinformatics/btaa1044 deep learning Eukaryote cross-species annotation 2021 Bakta Rapid &amp; standardized annotation of bacterial genomes &amp; plasmids pipeline Bacteria + plasmid It outpout among others embl files 2021 FINDER FINDER: an automated software package to annotate eukaryotic genes from RNA-Seq data and associated protein sequences. https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-021-04120-9 Pipeline Protein + RNAseq alignement + Abinitio (BRAKER) Eukaryote It output GTF files 2022 Pharokka Pharokka: a fast scalable bacteriophage annotation tool - https://doi.org/10.1093/bioinformatics/btac776 Pipeline prodigal is used for CDS bacteriophage 2023 FLAG FLAG: Find, Label, Annotate Genomes, a fully automated tool for genome gene structural and functional annotation of highly fragmented non-model species https://www.biorxiv.org/content/10.1101/2023.07.14.548907v1.full Pipeline Protein + RNAseq alignement + Abinitio Eukaryote Nextflow pipeline very complete 2023 BRAKER3 BRAKER3: Fully automated genome annotation using RNA-Seq and protein evidence with GeneMark-ETP, AUGUSTUS and TSEBRA - https://pubmed.ncbi.nlm.nih.gov/37398387/ Hybrid eukaryote 2023 Galba Galba: genome annotation with miniprot and AUGUSTUS - https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-023-05449-z pipeline Hybrid = Ab-intio evidence driven eukaryote use Augustus + miniprot 2024 Tiberius Tiberius: end-to-end deep learning with an HMM for gene prediction - https://academic.oup.com/bioinformatics/article/40/12/btae685/7903281 deep learning eukaryote <p>Legend: </p> Term Description Hybrid ab initio and evidence based = HMM-based gene prediction tool using extrinsic evidence Comparative genome sequence comparison CHMM class HMM CRF conditional random field; HMM \u00a0DBN Dynamic Bayes network DP dynamic programming \u00a0EHMM evolutionary HMM GHMM generalized HMM GPHMM generalized pair HMM HMM hidden Markov model IMM Interpolated Markov model LDA Linear Discriminant Analysis MDD maximal dependence decomposition ML maximum likelihood MM Markov Model NN Neural Networks PHMM pair HMM phyloHMM phylogenetic HMM RBFN Radial Basis Function Network SVM support vector machine WAM weight array matrix <p>Interesting publications Rogic, S., Mackworth, A. K., &amp; Ouellette, F. B. (2001). Evaluation of gene-finding programs on mammalian sequences. Genome research, 11(5), 817-32. Goodswen, S. J., Kennedy, P. J., &amp; Ellis, J. T. (2012). Evaluating high-throughput ab initio gene finders to discover proteins encoded in eukaryotic pathogen genomes missed by laboratory techniques. PloS one, 7(11), e50609. Chowdhury, B., Garai, A., &amp; Garai, G. (2017). An optimized approach for annotation of large eukaryotic genomic sequences using genetic algorithm. BMC bioinformatics, 18(1), 460. doi:10.1186/s12859-017-1874-7 Joel Armstrong, Ian T. Fiddes, Mark Diekhans and Benedict Paten. Whole-Genome Alignment and Comparative Annotation.Annu Rev Anim Biosci. 2019 Feb 15; 7: 41\u201364. Alice Carolyn McHardy Andreas Kloetgen. Finding Genes in Genome Sequence. Bioinformatics pp 271-291 B\u0105czkowski, K., Mackiewicz, K., Kowalczuk, M., Banaszak, J. and Cebrat, S., \u201cOd sekwencji do funkcji\u2013 poszukiwanie gen\u00f3w i ich adnotacje,\u201d Biotechnologia 3(70), 22\u201344 (2005) </p> <p>Interesting books Principles of Gene Manipulation and Genomics. De Sandy B. Primrose, Richard Twyman  </p>"},{"location":"bioinformatics/annotation/structural/annotation_tools_mitome/","title":"List of mitome annotation tools","text":"year Tool name Publication Type Method Organism Comments 2004 DOGMA Wyman SK, Jansen RK and Boore JL (2004) Automatic annotation of organellar genomes with DOGMA. Bioinformatics 20: 3252-3255 animal mitochondrial and plant chloroplast 2007 RNAweasel Lang B.F., M-J. Laforest, and G. Burger (2007) Mitochondrial introns: a critical view. Trends Genet 23:119-25. abinitio based on RNA secondary structure profiles mitochondrial RNAs only 2007 MFannot Lang B.F., M-J. Laforest, and G. Burger (2007) Mitochondrial introns: a critical view. Trends Genet 23:119-25. pipeline abinitio + similarity annotation of mitochondrial and plastid genomes helpful with organelle genomes that contain lots of introns. Output not easy to deal with. AGAT can be used to convert the output in gff. 2010 MITOFY Alverson AJ, Wei X, Rice DW, Stern DB, Barry K and Palmer JD (2010) Insights into the evolution of mitochondrial genome size from complete sequences of Citrullus lanatus and Cucurbita pepo (Cucurbitaceae). Molecular Biology and Evolution 27: 1436-1448 Plant mitochondrial 2010 MOSAS Sheffield NC, Hiatt KD, Valentine MC, Song H and Whiting MF (2010) Mitochondrial genomics in Orthoptera using MOSAS. Mitochondrial DNA 21: 87-104 insect mitochondrial genome 2011 MAKER2 Holt, C. &amp; Yandell, M. MAKER2: an annotation pipeline and genome-database management tool for second-generation genome projects. BMC Bioinformatics 12, 491 (2011). pipeline Eukaryote, Prokaryote but alignment approach can be used for other type It uses proteins, transcripts ... Abinitio: Augustus, Fgnesh,Genemark,snap. Need to modify the code to accept specific codon table for mitochondria. Not the best choice but provide nice protein alignments useful for manual curation 2013 MitoAnnotator Iwasaki W, Fukunaga T, Isagozawa R, Yamada K, Maeda, Y, Satoh TP, Sado T, Mabuchi K, Takeshima H, Miya M and Nishida M (2013) MitoFish and MitoAnnotator: a mitochondrial genome database of fish with an accurate and automatic annotation pipeline. Molecular Biology and Evolution 30: 2531-2540 Ab initio (sensors + Neural network) Fish MitoFish is a comprehensive and standardized fish mitochondrial genome database used by MitoAnnotator 2013 MITOS Bernt M, Donath A, J\u00fchling F, Externbrink F, Florentz C, Fritzsch G, P\u00fctz J, Middendorf M and Stadler PF (2013) MITOS: improved de novo metazoan mitochondrial genome annotation. Molecular Phylogenetics and Evolution 69: 313-319 metazoan mitochondrial genome 2014 Prokka Seemann T., Prokka: rapid prokaryotic genome annotation. Bioinformatics 2014 Jul 15;30(14):2068-9. PMID:24642063 pipeline Ab initio + evidence-based for functional annotation prokaryote Do structural and functional annotation. No intron allowed! 2017 Geseq Tillich M, Lehwark P, Pellizzer T, Ulbricht-Jones ES, Fischer A, Bock R and Greiner S (2017) GeSeq \u2013 versatile and accurate annotation of organelle genomes. Nucleic Acids Research 45: W6-W11 mitochondria and chloroplast web based tool 2018 AGORA Jung J, Kim JI, Jeong Y-S and Yi, G (2018) AGORA: organellar genome annotation from the amino acid and nucleotide references. Bioinformatics 34: 2661-2663 organelle genome annotation ( mitochondrion and plastid genomes of eukaryotes ) web application 2019 MitoZ \u00a0Yang C, Meng G, Liu S and Li Y (2019). MitoZ: a toolkit for animal mitochondrial genome assembly, annotation and visualization. Nucleic Acids Research, gkz173 <p>Interesting resource https://chlorobox.mpimp-golm.mpg.de/Alternative-Tools.html</p>"},{"location":"bioinformatics/annotation/structural/annotation_tools_plasmidome/","title":"List of plasmidome annotation tools","text":"year Tool name Publication Type Method Organism Comments 2004 PlasMapper PlasMapper: A web server for drawing and auto-annotating plasmid maps. Dong X. Stothard P. Forsythe I.J. Wishart D.S. Nucleic Acids Research, 2004 Plasmid web server \u00a02004 GENtle GENtle, a free multi-purpose molecular biology tool.\u00a0Magnus Manske, Thesis, 2006 toolkit Plasmid GENtle is a software for DNA and amino acid editing, database management, plasmid maps, restriction and ligation, alignments, sequencer data import, calculators, gel image display, PCR, and much more."},{"location":"bioinformatics/annotation/structural/annotation_tools_plastome/","title":"List of plastome annotation tools","text":"year Tool name Publication Type Method Organism Comments 2004 DOGMA Wyman SK, Jansen RK and Boore JL (2004) Automatic annotation of organellar genomes with DOGMA. Bioinformatics 20: 3252-3255 plant chloroplast and animal mitochondrial 2007 MFannot Developed by the labs of B. Franz Lang and Gertraud Burger (unpublished) pipeline abinitio + similarity annotation of mitochondrial and plastid genomes output not easy to deal with. AGAT can be used to convert the output in gff \u00a02011 MAKER2 Holt, C. &amp; Yandell, M. MAKER2: an annotation pipeline and genome-database management tool for second-generation genome projects. BMC Bioinformatics 12, 491 (2011). pipeline Eukaryote, Prokaryote but alignment approach can be used for other type It uses proteins, transcripts ... Abinitio: Augustus, Fgnesh,Genemark,snap. Need to modify the code to accept specific codon table for mitochondria. Not the best choice but provide nice protein alignments useful for manual curation 2012 CpGAVAS Liu C, Shi L, Zhu Y, Chen H, Zhang J, Lin X and Guan X (2012) CpGAVAS, an integrated web server for the annotation, visualization, analysis, and GenBank submission of completely sequenced chloroplast genome sequences. BMC Genomics 13: 715 web based tool 2013 CGAP Cheng J, Zeng Xu, Ren G and Liu Z (2013) CGAP: a new comprehensive platform for the comparative analysis of chloroplast genomes. BMC Bioinformatics 14:95 comparative 2014 Prokka Seemann T., Prokka: rapid prokaryotic genome annotation. Bioinformatics 2014 Jul 15;30(14):2068-9. PMID:24642063 pipeline Ab initio + evidence-based for functional annotation prokaryote Do structural and functional annotation. No intron allowed! 2015 ORG.Annot Developed by Eric Coissac (unpublished) Pipeline 2015 Plann Plann: A command\u2010line application for annotating plastome sequences. DI Huang, QCB Cronk. Applications in Plant Sciences 3 (8), 1500026, 2015. 226, 2015. chloroplast genome annotation 2017 Geseq Tillich M, Lehwark P, Pellizzer T, Ulbricht-Jones ES, Fischer A, Bock R and Greiner S (2017) GeSeq \u2013 versatile and accurate annotation of organelle genomes. Nucleic Acids Research 45: W6-W11 chloroplast mitochondria web based tool 2017 Verdant McKain MR, Hartsock RH, Wohl MM, Kellogg EA. 2017. Verdant: automated annotation, alignment and phylogenetic analysis of whole chloroplast genomes. Bioinformatics. 33:130\u2013132. chloroplast 2018 AGORA Jung J, Kim JI, Jeong Y-S and Yi, G (2018) AGORA: organellar genome annotation from the amino acid and nucleotide references. Bioinformatics 34: 2661-2663 organelle genome annotation ( mitochondrion and plastid genomes of eukaryotes ) web application 2019 CpGAVAS2 Shi L, Chen H, Jiang M, Wang L, Wu X, Huang L and Liu C (2019) CPGAVAS2, an integrated plastome sequence annotator and analyzer. Nucleic Acids Research, gkz345 <p>Interesting resource https://chlorobox.mpimp-golm.mpg.de/Alternative-Tools.html</p>"},{"location":"bioinformatics/format/conversion/gff_to_bed/","title":"GFF to BED conversion","text":"<p>It exists many GFF formats and many GTF formats (see here for a complete review) and many tools to perform the conversion. We will try to see in this review the main differences.</p>"},{"location":"bioinformatics/format/conversion/gff_to_bed/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Test resume</li> <li>The GFF file to convert</li> <li>The converters</li> <li>AGAT</li> <li>PASA</li> <li>bedops</li> <li>Kent utils</li> <li>The bed format</li> </ul>"},{"location":"bioinformatics/format/conversion/gff_to_bed/#test-summary","title":"Test summary","text":"tool Comment AGAT default RGB color to 255,0,0 PASA Particular 3rd column that contains a list of names bedops each gff feature give one line. Only the 6 first colums are correct Kent utils extra coma at the end of 11th and 12th column"},{"location":"bioinformatics/format/conversion/gff_to_bed/#the-gff-file-to-convert","title":"The GFF file to convert","text":"<p>The test file is a GFF3 file:</p> <pre><code>##gff-version 3\n# This is a test sample\nscaffold625 maker   gene    337818  343277  .   +   .   ID=CLUHARG00000005458;Name=TUBB3_2\nscaffold625 maker   mRNA    337818  343277  .   +   .   ID=CLUHART00000008717;Parent=CLUHARG00000005458\nscaffold625 maker   tss 337916  337918  .   +   .   ID=CLUHART00000008717:tss;Parent=CLUHART00000008717\nscaffold625 maker   start_codon 337916  337918  .   +   .   ID=CLUHART00000008717:start;Parent=CLUHART00000008717\nscaffold625 maker   CDS 337915  337971  .   +   0   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   CDS 340733  340841  .   +   0   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   CDS 341518  341628  .   +   2   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   CDS 341964  343033  .   +   2   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   stop_codon  343031  343033  .   +   .   ID=CLUHART00000008717:stop;Parent=CLUHART00000008717\nscaffold625 maker   exon    337818  337971  .   +   .   ID=CLUHART00000008717:exon1;Parent=CLUHART00000008717\nscaffold625 maker   exon    340733  340841  .   +   .   ID=CLUHART00000008717:exon2;Parent=CLUHART00000008717\nscaffold625 maker   exon    341518  341628  .   +   .   ID=CLUHART00000008717:exon3;Parent=CLUHART00000008717\nscaffold625 maker   exon    341964  343277  .   +   .   ID=CLUHART00000008717:exon4;Parent=CLUHART00000008717\nscaffold625 maker   five_prime_utr  337818  337914  .   +   .   ID=CLUHART00000008717:five_prime_utr;Parent=CLUHART00000008717\nscaffold625 maker   three_prime_UTR 343034  343277  .   +   .   ID=CLUHART00000008717:three_prime_utr;Parent=CLUHART00000008717\n</code></pre>"},{"location":"bioinformatics/format/conversion/gff_to_bed/#agat","title":"AGAT","text":"<p>AGAT v0.2.2  </p> <p><code>agat_convert_sp_gff2bed.pl --gff 1_test.gff -o 1_test_agat.bed</code></p> <pre><code>scaffold625 337817  343277  CLUHART00000008717  0   +   337914  343033  255,0,0 4   154,109,111,1314    0,2915,3700,4146\n</code></pre>"},{"location":"bioinformatics/format/conversion/gff_to_bed/#pasa","title":"PASA","text":"<p>PASA pasa-v2.4.1</p> <p><code>./PASApipeline/misc_utilities/gff3_file_to_bed.pl test_1.gff &gt; 1_test_transdecoder.bed</code></p> <pre><code>#gffTags\nscaffold625 337817  343277  ID=CLUHART00000008717;CLUHARG00000005458;TUBB3_2    0   +   337914  343033  0   4   154,109,111,1314    0,2915,3700,4146\n</code></pre>"},{"location":"bioinformatics/format/conversion/gff_to_bed/#bedops","title":"bedops","text":"<p>version: 2.4.37</p> <p><code>gff2bed &lt; 1_test.gff &gt; 1_test_bedops.bed</code></p> <pre><code>scaffold625 337817  337914  CLUHART00000008717:five_prime_utr   .   +   maker   five_prime_utr  .   ID=CLUHART00000008717:five_prime_utr;Parent=CLUHART00000008717\nscaffold625 337817  337971  CLUHART00000008717:exon1    .   +   maker   exon    .   ID=CLUHART00000008717:exon1;Parent=CLUHART00000008717\nscaffold625 337817  343277  CLUHARG00000005458  .   +   maker   gene    .   ID=CLUHARG00000005458;Name=TUBB3_2\nscaffold625 337817  343277  CLUHART00000008717  .   +   maker   mRNA    .   ID=CLUHART00000008717;Parent=CLUHARG00000005458\nscaffold625 337914  337971  CLUHART00000008717:cds  .   +   maker   CDS 0   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 337915  337918  CLUHART00000008717:start    .   +   maker   start_codon .   ID=CLUHART00000008717:start;Parent=CLUHART00000008717\nscaffold625 337915  337918  CLUHART00000008717:tss  .   +   maker   tss .   ID=CLUHART00000008717:tss;Parent=CLUHART00000008717\nscaffold625 340732  340841  CLUHART00000008717:cds  .   +   maker   CDS 0   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 340732  340841  CLUHART00000008717:exon2    .   +   maker   exon    .   ID=CLUHART00000008717:exon2;Parent=CLUHART00000008717\nscaffold625 341517  341628  CLUHART00000008717:cds  .   +   maker   CDS 2   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 341517  341628  CLUHART00000008717:exon3    .   +   maker   exon    .   ID=CLUHART00000008717:exon3;Parent=CLUHART00000008717\nscaffold625 341963  343033  CLUHART00000008717:cds  .   +   maker   CDS 2   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 341963  343277  CLUHART00000008717:exon4    .   +   maker   exon    .   ID=CLUHART00000008717:exon4;Parent=CLUHART00000008717\nscaffold625 343030  343033  CLUHART00000008717:stop .   +   maker   stop_codon  .   ID=CLUHART00000008717:stop;Parent=CLUHART00000008717\nscaffold625 343033  343277  CLUHART00000008717:three_prime_utr  .   +   maker   three_prime_UTR .   ID=CLUHART00000008717:three_prime_utr;Parent=CLUHART00000008717\n</code></pre>"},{"location":"bioinformatics/format/conversion/gff_to_bed/#kent-utils","title":"Kent utils","text":"<p>version from 26-Feb-2020</p> <p><code>./gff3ToGenePred.dms 1_test.gff temp.genePred</code> <code>./genePredToBed.dms temp.genePred 1_test_genePred.bed</code></p> <pre><code>scaffold625 337817  343277  CLUHART00000008717  0   +   337914  343033  0   4   154,109,111,1314,   0,2915,3700,4146,\n</code></pre>"},{"location":"bioinformatics/format/conversion/gff_to_bed/#the-bed-format","title":"The bed format","text":"<p>Detailed information can be found here: https://genome.ucsc.edu/FAQ/FAQformat.html Below a description of the different fields:</p> column feature type mandatory comment 1 chrom X The name of the chromosome (e.g. chr3, chrY, chr2_random) or scaffold (e.g. scaffold10671). 2 chromStart X The starting position of the feature in the chromosome or scaffold. The first base in a chromosome is numbered 0. 3 chromEnd X The ending position of the feature in the chromosome or scaffold. The chromEnd base is not included in the display of the feature. For example, the first 100 bases of a chromosome are defined as chromStart=0, chromEnd=100, and span the bases numbered 0-99. 4 name Defines the name of the BED line. This label is displayed to the left of the BED line in the Genome Browser window when the track is open to full display mode or directly to the left of the item in pack mode. 5 score A score between 0 and 1000. If the track line useScore attribute is set to 1 for this annotation data set, the score value will determine the level of gray in which this feature is displayed (higher numbers = darker gray). 6 strand Defines the strand - either '+' or '-'. 7 thickStart The starting position at which the feature is drawn thickly 8 thickEnd The ending position at which the feature is drawn thickly 9 itemRgb An RGB value of the form R,G,B (e.g. 255,0,0). If the track line itemRgb attribute is set to \"On\", this RBG value will determine the display color of the data contained in this BED line. NOTE: It is recommended that a simple color scheme (eight colors or less) be used with this attribute to avoid overwhelming the color resources of the Genome Browser and your Internet browser. 10 blockCount The number of blocks (exons) in the BED line. 11 blockSizes A comma-separated list of the block sizes. The number of items in this list should correspond to blockCount. 12 blockStarts A comma-separated list of block starts. All of the blockStart positions should be calculated relative to chromStart. The number of items in this list should correspond to blockCount. <p>/!\\ location BED format is 0-based, half-open [start-1, end), while GFF is 1-based, closed [start, end].</p> <p></p>"},{"location":"bioinformatics/format/conversion/gff_to_gtf/","title":"GFF to GTF conversion","text":"<p>It exists many GFF formats and many GTF formats (see here for a complete review) and many tools to perform the conversion. We will try to see in this review the main differences.</p>"},{"location":"bioinformatics/format/conversion/gff_to_gtf/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Test summary</li> <li>The GFF file to convert</li> <li>The converters</li> <li>AGAT</li> <li>gffread</li> <li>GenomeTools</li> <li>ea-utils</li> <li>TransDecoder</li> <li>Kent utils</li> <li>Feature types in GTF versions</li> </ul>"},{"location":"bioinformatics/format/conversion/gff_to_gtf/#test-summary","title":"Test summary","text":"tool respect GTF format UTR conserved attribute conserved Stop codon removed from CDS Comment AGAT Yes - All (default GTF3) Yes it converts UTR terms to the appropriate ones according to the GTF version selected. Yes - All Yes (Only if the feature is present in the file. If not it is possible to add it via agat_sp_add_start_and_stop.pl) Can take any GTF GFF as input. The only one keeping comments at the beginning of the file. gffread No - They say GTF2.2 but it is not: transcript should be removed; start_codon and stop_codon should stay. No No No GenomeTools No - only CDS and exon kept No No No gene_id and transcript_id get new identifiers. ea-utils No - only CDS and exon kept No No No TransDecoder No - start and stop codon removed No Name only No Needs the fasta file for the conversion. Location of the last CDS modified and incorrect Kent utils No - gene is missing or transcript is superfluous to be compliant to one of the GTF format No No Yes Create a new attribute 'gene_name'."},{"location":"bioinformatics/format/conversion/gff_to_gtf/#the-gff-file-to-convert","title":"The GFF file to convert","text":"<p>The test file is a GFF3 file:</p> <pre><code>##gff-version 3\n# This is a test sample\nscaffold625 maker   gene    337818  343277  .   +   .   ID=CLUHARG00000005458;Name=TUBB3_2\nscaffold625 maker   mRNA    337818  343277  .   +   .   ID=CLUHART00000008717;Parent=CLUHARG00000005458\nscaffold625 maker   tss 337916  337918  .   +   .   ID=CLUHART00000008717:tss;Parent=CLUHART00000008717\nscaffold625 maker   start_codon 337916  337918  .   +   .   ID=CLUHART00000008717:start;Parent=CLUHART00000008717\nscaffold625 maker   CDS 337915  337971  .   +   0   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   CDS 340733  340841  .   +   0   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   CDS 341518  341628  .   +   2   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   CDS 341964  343033  .   +   2   ID=CLUHART00000008717:cds;Parent=CLUHART00000008717\nscaffold625 maker   stop_codon  343031  343033  .   +   .   ID=CLUHART00000008717:stop;Parent=CLUHART00000008717\nscaffold625 maker   exon    337818  337971  .   +   .   ID=CLUHART00000008717:exon1;Parent=CLUHART00000008717\nscaffold625 maker   exon    340733  340841  .   +   .   ID=CLUHART00000008717:exon2;Parent=CLUHART00000008717\nscaffold625 maker   exon    341518  341628  .   +   .   ID=CLUHART00000008717:exon3;Parent=CLUHART00000008717\nscaffold625 maker   exon    341964  343277  .   +   .   ID=CLUHART00000008717:exon4;Parent=CLUHART00000008717\nscaffold625 maker   five_prime_utr  337818  337914  .   +   .   ID=CLUHART00000008717:five_prime_utr;Parent=CLUHART00000008717\nscaffold625 maker   three_prime_UTR 343034  343277  .   +   .   ID=CLUHART00000008717:three_prime_utr;Parent=CLUHART00000008717\n</code></pre>"},{"location":"bioinformatics/format/conversion/gff_to_gtf/#the-converters","title":"The converters","text":""},{"location":"bioinformatics/format/conversion/gff_to_gtf/#agat","title":"AGAT","text":"<p>AGAT v0.5.1  </p> <p><code>agat_convert_sp_gff2gtf.pl --gff 1_test.gff -o 1_test_agat.gtf</code></p> <pre><code>##gtf-version 3\n##This is a test sample\nscaffold625 maker   gene    337818  343277  .   +   .   gene_id \"CLUHARG00000005458\"; ID \"CLUHARG00000005458\"; Name \"TUBB3_2\";\nscaffold625 maker   transcript  337818  343277  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717\"; Parent \"CLUHARG00000005458\"; original_biotype \"mrna\";\nscaffold625 maker   exon    337818  337971  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:exon1\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   exon    340733  340841  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:exon2\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   exon    341518  341628  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:exon3\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   exon    341964  343277  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:exon4\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   CDS 337915  337971  .   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:cds\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   CDS 340733  340841  .   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:cds\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   CDS 341518  341628  .   +   2   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:cds\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   CDS 341964  343030  .   +   2   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:cds\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   five_prime_utr  337818  337914  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:five_prime_utr\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   start_codon 337916  337918  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:start\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   stop_codon  343031  343033  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:stop\"; Parent \"CLUHART00000008717\";\nscaffold625 maker   three_prime_utr 343034  343277  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; ID \"CLUHART00000008717:three_prime_utr\"; Parent \"CLUHART00000008717\"; original_biotype \"three_prime_UTR\";\n</code></pre>"},{"location":"bioinformatics/format/conversion/gff_to_gtf/#gffread","title":"gffread","text":"<p>gffread 0.11.4</p> <p><code>gffread -E 1_test.gff -T -o  1_test_gffread.gtf</code></p> <pre><code>scaffold625 maker   transcript  337818  343277  .   +   .   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   exon    337818  337971  .   +   .   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   exon    340733  340841  .   +   .   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   exon    341518  341628  .   +   .   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   exon    341964  343277  .   +   .   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   CDS 337915  337971  .   +   0   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   CDS 340733  340841  .   +   0   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   CDS 341518  341628  .   +   2   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\nscaffold625 maker   CDS 341964  343033  .   +   2   transcript_id \"CLUHART00000008717\"; gene_id \"CLUHARG00000005458\";\n</code></pre>"},{"location":"bioinformatics/format/conversion/gff_to_gtf/#genometools","title":"GenomeTools","text":"<p>GenomeTools 1.6.1 The help says it convert into GTF2.2</p> <p><code>gt gff3_to_gtf 1_test.gff &gt; 1_test_genometools.gtf</code></p> <pre><code>scaffold625 maker   exon    337818  337971  .   +   .   gene_id \"1\"; transcript_id \"1.1\";\nscaffold625 maker   exon    340733  340841  .   +   .   gene_id \"1\"; transcript_id \"1.1\";\nscaffold625 maker   exon    341518  341628  .   +   .   gene_id \"1\"; transcript_id \"1.1\";\nscaffold625 maker   exon    341964  343277  .   +   .   gene_id \"1\"; transcript_id \"1.1\";\nscaffold625 maker   CDS 337915  337971  .   +   0   gene_id \"1\"; transcript_id \"1.1\";\nscaffold625 maker   CDS 340733  340841  .   +   0   gene_id \"1\"; transcript_id \"1.1\";\nscaffold625 maker   CDS 341518  341628  .   +   2   gene_id \"1\"; transcript_id \"1.1\";\nscaffold625 maker   CDS 341964  343033  .   +   2   gene_id \"1\"; transcript_id \"1.1\";\n</code></pre>"},{"location":"bioinformatics/format/conversion/gff_to_gtf/#ea-utils","title":"ea-utils","text":"<p>ea-utils commit 2b3d8c5d148801c98a2b3f3d54009a72c5b99521</p> <p><code>./gff2gtf-eautils test_1.gff &gt;  1_test_ea-utils.gtf</code></p> <pre><code>scaffold625 maker   exon    337818  337971  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\nscaffold625 maker   CDS 337915  337971  0   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\nscaffold625 maker   CDS 340733  340841  0   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\nscaffold625 maker   exon    340733  340841  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\nscaffold625 maker   CDS 341518  341628  0   +   2   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\nscaffold625 maker   exon    341518  341628  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\nscaffold625 maker   CDS 341964  343033  0   +   2   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\nscaffold625 maker   exon    341964  343277  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717:CLUHARG00000005458\";\n</code></pre>"},{"location":"bioinformatics/format/conversion/gff_to_gtf/#transdecoder","title":"TransDecoder","text":"<p>Transdecoder  v5.5.0</p> <p><code>gff3_gene_to_gtf_format.pl test_1.gff test_1.fa &gt; 1_test_transdecoder.gtf</code></p> <pre><code>scaffold625 maker   gene    337818  343277  0   +   .   gene_id \"CLUHARG00000005458\"; Name \"TUBB3_2\";\nscaffold625 maker   transcript  337818  343277  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   exon    337818  337971  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   CDS 337818  337971  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   exon    340733  340841  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   CDS 340733  340841  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   exon    341518  341628  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   CDS 341518  341628  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   exon    341964  343277  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\nscaffold625 maker   CDS 341964  343277  0   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; Name \"TUBB3_2\";\n</code></pre>"},{"location":"bioinformatics/format/conversion/gff_to_gtf/#kent-utils","title":"Kent utils","text":"<p>version from 26-Feb-2020</p> <p><code>./gff3ToGenePred.dms 1_test.gff temp.genePred</code> <code>./genePredToGtf.dms file temp.genePred 1_test_genePred.gtf</code></p> <pre><code>scaffold625 temp.genePred   transcript  337818  343277  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\";  gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   exon    337818  337971  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"1\"; exon_id \"CLUHART00000008717.1\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   CDS 337915  337971  .   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"1\"; exon_id \"CLUHART00000008717.1\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   exon    340733  340841  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"2\"; exon_id \"CLUHART00000008717.2\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   CDS 340733  340841  .   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"2\"; exon_id \"CLUHART00000008717.2\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   exon    341518  341628  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"3\"; exon_id \"CLUHART00000008717.3\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   CDS 341518  341628  .   +   2   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"3\"; exon_id \"CLUHART00000008717.3\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   exon    341964  343277  .   +   .   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"4\"; exon_id \"CLUHART00000008717.4\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   CDS 341964  343030  .   +   2   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"4\"; exon_id \"CLUHART00000008717.4\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   start_codon 337915  337917  .   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"1\"; exon_id \"CLUHART00000008717.1\"; gene_name \"CLUHARG00000005458\";\nscaffold625 temp.genePred   stop_codon  343031  343033  .   +   0   gene_id \"CLUHARG00000005458\"; transcript_id \"CLUHART00000008717\"; exon_number \"4\"; exon_id \"CLUHART00000008717.4\"; gene_name \"CLUHARG00000005458\";\n</code></pre>"},{"location":"bioinformatics/format/conversion/gff_to_gtf/#feature-types-in-gtf-versions","title":"Feature types in GTF versions","text":"GTF version feature type accepted GTF3 gene,  transcript,  exon,  CDS,  Selenocysteine,  start_codon,  stop_codon,  three_prime_utr,  five_prime_utr GTF2_5 gene,  transcript,  exon,  CDS,  UTR,  start_codon,  stop_codon,  Selenocysteine GTF2_2 CDS,  start_codon,  stop_codon,  5UTR,  3UTR,  inter,  inter_CNS,  intron_CNS,  exon GTF2_1 CDS,  start_codon,  stop_codon,  exon,  5UTR,  3UTR GTF2 CDS,  start_codon,  stop_codon,  exon GTF1 CDS,  start_codon,  stop_codon,  exon,  intron"},{"location":"bioinformatics/format/conversion/gxf/","title":"The GTF/GFF formats","text":"<p>The GTF/GFF formats are 9-column text formats used to describe and represent genomic features. The formats have quite evolved since 1997, and despite well-defined specifications existing nowadays they have a great flexibility allowing holding wide variety of information. This flexibility has a drawback aspect, there is an incredible amount of flavor of the formats: GFF / GFF1 / GFF2 / GFF2.5 / GFF3 / GTF / GTF2 / GTF2.1 / GTF2.2 / GTF2.5 / GTF3</p> <p>It's often hard to understand and differentiate all GFF/GTF formats/flavors. Many tools using GTF/GFF formats fails due to specific expectations. Here is a comprehensive overview of the formats and their histories to help disentangle this complexity.</p>"},{"location":"bioinformatics/format/conversion/gxf/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Forewords</li> <li>Introduction</li> <li>GFF<ul> <li>GFF0 (before 13-11-1997)</li> <li>GFF1 (13-11-1997)</li> <li>GFF2 (29-09-2000)  </li> <li>GFF3 (2004)</li> </ul> </li> <li>GTF<ul> <li>GTF1 (2000)</li> <li>GTF2 and GFF2.5 (2003)</li> <li>GTF2.1 (2005)</li> <li>GTF2.2 (2007)</li> <li>GTF2.5 unofficial (2012)</li> <li>GTF3 unofficial (2013)</li> </ul> </li> <li>Resume<ul> <li>Timeline of the different formats</li> <li>Main points and differences between GFF formats</li> <li>Main points and differences between GTF formats</li> <li>Discussion</li> </ul> </li> <li>Extra<ul> <li>Problem encountered due to lack of standardization</li> <li>Ensembl GTF formats<ul> <li>Evolution of the 3rd and 9th column</li> <li>Difference between GENCODE and Ensembl GTF</li> </ul> </li> </ul> </li> </ul>"},{"location":"bioinformatics/format/conversion/gxf/#forewords","title":"Forewords","text":"<p>\u21e8  When I use the term gff it includes all gff formats/flavors. (The first version of the format was not called gff1 but gff. But to make it easier I will always specify the version of the format saying gff1 when I talk about the first version of it).  </p> <p>\u21e8  In the same way, when I use the term gtf it includes all gtf formats/flavors.  </p> <p>\u21e8  I have created the term gxf that means all the gff and gtf formats/flavors.</p>"},{"location":"bioinformatics/format/conversion/gxf/#introduction","title":"Introduction","text":"<p>GFF (Gene-Finding Format) is a general-purpose genome annotation format. It was conceived during a 1997 meeting on computational genefinding at the Isaac Newton Institute, Cambridge, UK and developed in collaboration between the Sanger Centre, the University of California at Santa Cruz and other participants (Holmes I: Studies in Probabilistic Sequence Alignment and Evolution. PhD thesis University of Cambridge 1998.). The key players have been Richard Durbin and David Haussler.  </p> <p>GFF is a one-line-per-record format that can be used to identify a substring of a biological sequence. It is an extension of a basic (name, start, end) tuple (or \"NSE\"). It was originally designed as a common format for sharing information between gene-finding sensors (finding signals: starts, splice sites, stops, motifs; finding regions: exons, introns, protein domains etc.), and gene predictors (predicting gene, RNA transcript or protein structures). These two steps were usually performed within the same program but thanks to the GFF format they can be decoupled, allowing the transfer of feature information from one tool to another. But its uses go beyond gene-finding and it is used as a convenient way to represent a set of many kinds of features. The GFF fomat has been developed to be easy to parse and process by a variety of programs in different languages (e.g Unix tools as grep and sort, perl, awk, etc.). For these reasons, they decided that each feature is described on a single line, and line order is not relevant.</p>"},{"location":"bioinformatics/format/conversion/gxf/#gff","title":"GFF","text":""},{"location":"bioinformatics/format/conversion/gxf/#gff0","title":"GFF0","text":"<p>(before 13-11-1997)  </p> <p>There is no clear information about how the format looked at that time but it was close to the GFF1 format specification without the field <code>source</code> added the 1997-11-13.</p>"},{"location":"bioinformatics/format/conversion/gxf/#gff1","title":"GFF1","text":"<p>(13-11-1997)  </p> <p>For a complete description of the format please refer to this link: https://web.archive.org/web/19980222142332/http://www.sanger.ac.uk:80/~rd/gff.html. This is the oldest description of the format I found (1998-02-22).</p> <p>I consider the format as GFF1 when they definitely defined the 9th field of the format (1997-11-13 rd: added extra <code>source</code> field as discussed at Newton Institute meeting 971029). Before that, the format only existed in its 0th version.</p> <p>This GFF1 format contains 8 mandatory fields followed by one optional field. The fields are:  </p> <pre><code>&lt;seqname&gt; &lt;source&gt; &lt;feature&gt; &lt;start&gt; &lt;end&gt; &lt;score&gt; &lt;strand&gt; &lt;frame&gt; [group]\n</code></pre> <p>They are defined as follows:</p> <pre><code>&lt;seqname&gt;\n    The name of the sequence. Having an explicit sequence name allows a feature file to be prepared for a data set of multiple sequences. Normally the seqname will be the identifier of the sequence in an accompanying fasta format file. An alternative is that 'seqname' is the identifier for a sequence in a public database, such as an EMBL/Genbank/DDBJ accession number. Which is the case, and which file or database to use, should be explained in accompanying information.\n&lt;source&gt;\n    The source of this feature. This field will normally be used to indicate the program making the prediction, or if it comes from public database annotation, or is experimentally verified, etc.\n&lt;feature&gt;\n    The feature type name. We hope to suggest a standard set of features, to facilitate import/export, comparison etc.. Of course, people are free to define new ones as needed. For example, Genie splice detectors account for a region of DNA, and multiple detectors may be available for the same site, as shown above.\n&lt;start&gt;, &lt;end&gt;\n    Integers. &lt;start&gt; must be less than or equal to &lt;end&gt;. Sequence numbering starts at 1, so these numbers should be between 1 and the length of the relevant sequence, inclusive.\n&lt;score&gt;\n    A floating point value. When there is no score (i.e., for a sensor that just records the possible presence of a signal, as \"splice5\" above) you must give something, by convention 0.\n&lt;strand&gt;\n    One of '+', '-' or '.'. '.' should be used when strand is not relevant, e.g. for dinucleotide repeats.\n&lt;frame&gt;\n    One of '0', '1', '2' or '.'. '0' indicates that the specified region is in frame, i.e., that its first base corresponds to the first base of a codon. '1' indicates that there is one extra base, i.e., that the second base of the region corresponds to the first base of a codon, and '2' means that the third base of the region is the first base of a codon. If the strand is '-', then the first base of the region is value of &lt;end&gt;, because the corresponding coding region will run from &lt;end&gt; to &lt;start&gt; on the reverse strand.\n[group]\n    An optional string-valued field that can be used as a name to group together a set of records. Typical uses might be to group the introns and exons in one gene prediction (or experimentally verified gene structure), or to group multiple regions of match to another sequence, such as an EST or a protein. See below for examples.\n\n=&gt; All strings (i.e., values of the &lt;seqname&gt;, &lt;feature&gt; or &lt;group&gt; fields) should be under 256 characters long, and should not include whitespace. The whole line should be under 32k long. A character limit is not very desirable, but helps write parsers in some languages. The slightly silly 32k limit is to allow plenty of space for comments/extra data.\n=&gt; Fields must be separated by TAB characters ('\\t').\n</code></pre> <p>Extra features of the format:</p> <pre><code>Comments\n\nComments are allowed, starting with \"#\" as in Perl, awk etc. Everything following # until the end of the line is ignored. Effectively this can be used in two ways. Either it must be at the beginning of the line (after any whitespace), to make the whole line a comment, or the comment could come after all the required fields on the line.\nWe also permit extra information to be given on the line following the group field without a '#' character. This allows extra method-specific information to be transferred with the line. However, we discourage overuse of this feature: better to find a way to do it with more true feature lines, and perhaps groups.\n\n## comment lines for meta information\n\nThere is a set of standardised (i.e., parsable) ## line types that can be used optionally at the top of a gff file. The philosophy is a little like the special set of %% lines at the top of postscript files, used for example to give the BoundingBox for EPS files.\nCurrent proposed ## lines are:\n\n ##gff-version 1\nGFF version - in case it is a real success and we want to change it. The current version is 1.\n ##source-version {source} {version text}\nSo that people can record what version of a program or package was used to make the data in this file. I suggest the version is text without whitespace. That allows things like 1.3, 4a etc.\n ##date {date}\nThe date the file was made, or perhaps that the prediction programs were run. We suggest to use astronomical format: 1997-11-08 for 8th November 1997, first because these sort properly, and second to avoid any US/European bias.\n\n ##DNA {seqname}\n ##acggctcggattggcgctggatgatagatcagacgac\n ##...\n ##end-DNA\nTo give a DNA sequence. Several people have pointed out that it may be convenient to include the sequence in the file. It should not become mandatory to do so. Often the seqname will be a well-known identifier, and the sequence can easily be retrieved from a database, or an accompanying file.\n ##sequence-region {seqname} {start} {end}\nTo indicate that this file only contains entries for the the specified subregion of a sequence.\nPlease feel free to propose new ## lines. The ## line proposal came out of some discussions including Anders Krogh, David Haussler, people at the Newton Institute on 1997-10-29 and some email from Suzanna Lewis. Of course, naive programs can ignore all of these...\n</code></pre> <p>Here is an example of GFF1:  </p> <pre><code>##gff-version 1\nSEQ1    EMBL    atg 103 105 .   +   0\nSEQ1    EMBL    exon    103 172 .   +   0\nSEQ1    EMBL    splice5 172 173 .   +   .\nSEQ1    netgene splice5 172 173 0.94    +   .\n# this is comment that will be skipped by the parser\nSEQ1    genie   sp5-20  163 182 2.3 +   .\nSEQ1    genie   sp5-10  168 177 2.1 +   .\nSEQ2    grail   ATG 17  19  2.1 -   0\nSEQ3    pred    exon    100 135 .   +   0   locus1 # this is also a comment that will be skipped by the parser\nSEQ3    pred    exon    235 260 .   +   2   locus1 This is an example of extra information... They discourage overuse of this feature.\nSEQ3    pred    exon    360 396 .   +   0   locus1\n</code></pre>"},{"location":"bioinformatics/format/conversion/gxf/#gff2","title":"GFF2","text":"<p>(29-09-2000)  </p> <p>/!\\ Note: Some of the changes we will see have been implemented before the offical release of GFF2. As a consequence, several interemediate states between version 1 and 2 have existed. We can call them GFF1.X. I will not further discuss these intermediate states.</p> <p>16/12/98: Discussions with Lincoln Stein and others, the Version 2 format of GFF is proposed.  </p> <p>17/11/99: Gene Feature Finding Version 2 format is conceptually generalized to be the General Feature Format</p> <p>The GFF2 format is conceptualized since the 16/12/98 but becomes officially the default version the 2000-9-29. Here is the official description which is a snapshot from here: https://web.archive.org/web/20010208224442/http://www.sanger.ac.uk:80/Software/formats/GFF/GFF_Spec.shtml.  </p> <p>You can find the first description (03 Feb 2000) of the GFF2 here that comes from here: ftp://ftp.sanger.ac.uk/pub/resources/software/gff-old/gff/.</p> <p>Here we will review changes from GFF1.</p> <p>=&gt; The Gene Feature Finding has been  generalized to accomodate RNA and Protein feature files and has been renamed the General Feature Format while retaining the same acronym GFF.  </p> <p>The main change from Version 1 to Version 2 is the revision of the optional 9th field with tag-value type structure (essentially semicolon-separated .ace format) used for any additional material on the line. Version 2 also allows '.' as a score, for features for which there is no score. With the changes taking place to version 2 of the format, we also allow for feature sets to be defined over RNA and Protein sequences, as well as genomic DNA. This is used for example by the EMBOSS project to provide standard format output for all features as an option. In this case the  and  fields should be set to '.'. To assist this transition in specification, a new #Type Meta-Comment has been added."},{"location":"bioinformatics/format/conversion/gxf/#definition","title":"Definition","text":"<p>This GFF2 format contains 8 mandatory fields followed by optional fields. Fields are:  </p> <pre><code>&lt;seqname&gt; &lt;source&gt; &lt;feature&gt; &lt;start&gt; &lt;end&gt; &lt;score&gt; &lt;strand&gt; &lt;frame&gt; [group/attributes] [comments]\n</code></pre> <p>Differences in these fields from GFF1 are as follows:</p> <pre><code>&lt;seqname&gt;\n    /\n&lt;source&gt;\n    /\n&lt;feature&gt;\n    Version 2 change: Standard Table of Features - we would like to enforce a standard nomenclature for common GFF features. This does not forbid the use of other features, rather, just that if the feature is obviously described in the standard list, that the standard label should be used. For this standard table we propose to fall back on the international public standards for genomic database feature annotation, specifically, the DDBJ/EMBL/GenBank feature table.\n&lt;start&gt;, &lt;end&gt;\n    Version 2 change: version 2 condones values of &lt;start&gt; and &lt;end&gt; that extend outside the reference sequence. This is often more natural when dumping from acedb, rather than clipping. It means that some software using the files may need to clip for itself.\n&lt;score&gt;\n    Version 2 change: When there is no score (i.e., for a sensor that just records the possible presence of a signal, as for the EMBL features above) you should use '.' instead of 0.\n&lt;strand&gt;\n    Version 2 change: This field is left empty '.' for RNA and protein features.\n&lt;frame&gt;\n    Version 2 change: This field is left empty '.' for RNA and protein features.\n[group/attribute]\n    [New] Standard Table of Attribute Tag Identifiers The semantics of tags in attribute field tag-values pairs has not yet been completely formalized, however a useful constraint is that they be equivalent, where appropriate, to DDBJ/EMBL/GenBank feature 'qualifiers' of given features (see EMBL feature descriptions).\n\nIn addition to these, ACEDB typically dumps GFF with specific tag-value pairs for given feature types. These tag-value pairs may be considered 'standard' GFF tag-values with respect to ACEDB databases. (rbsk: These will be summarized in a table here in the near future)\n\nVersion 2 change: In version 2, the optional [group] field is renamed to [attribute] (09/99) and must have an tag-value structure following the syntax used within objects in a .ace file, flattened onto one line by semicolon separators. Tags must be standard identifiers ([A-Za-z][A-Za-z0-9_]*). Free text values must be quoted with double quotes. Note: all non-printing characters in such free text value strings (e.g. newlines, tabs, control characters, etc) must be explicitly represented by their C (UNIX) style backslash-escaped representation (e.g. newlines as '\\n', tabs as '\\t'). As in ACEDB, multiple values can follow a specific tag. The aim is to establish consistent use of particular tags, corresponding to an underlying implied ACEDB model if you want to think that way (but acedb is not required). Examples of these would be:\nseq1     BLASTX  similarity   101  235 87.1 + 0 Target \"HBA_HUMAN\" 11 55 ; E_value 0.0003\ndJ102G20 GD_mRNA coding_exon 7105 7201   .  - 2 Sequence \"dJ102G20.C1.1\"\n\n=&gt; Version 2 change: field and line size limitations are removed; however, fields (except the optional [attribute] field above) must still not include whitespace.\n=&gt; Version 2 note: previous Version 2 permission to use arbitrary whitespace as field delimiters is now revoked! (99/02/26)\n</code></pre> <p>Extra features of the format:</p> <pre><code>Comments\n\n[...]\nWe also permit extra information to be given on the line following the attribute field without a '#' character (Version 2 change: this extra information must be delimited by the '#' comment delimiter OR by another tab field delimiter character, following any and all [attribute] field tag-value pairs).\n[...]\n\nVersion 2 change: we gave in and defined a structured way of passing additional information, as described above under [attribute]. But the sentiment of this paragraph still applies - don't overuse the tag-value syntax. The use of tag-value pairs (with whitespace) renders problematic the parsing of Version 1 style comments (following the attribute field, without a '#' character), so in Version 2, such [attribute] trailing comments must either start with the \"#\" as noted above, or with at least one additional tab character. Moreover, '#' characters embedded within quoted text string values of [attribute] tag-values should not be parsed as the beginning of a comment.\n\n## comment lines for meta information\n\nThere is a set of standardised (i.e., parsable) ## line types that can be used optionally at the top of a gff file. The philosophy is a little like the special set of %% lines at the top of postscript files, used for example to give the BoundingBox for EPS files.\nCurrent proposed ## lines are:\n\n  ##gff-version 2\n    The current version is 2. (Version 2 change!)\n ##source-version {source} {version text}\n    /\n ##date {date}\n    /\n  ##Type &lt;type&gt; [&lt;name&gt;]\n    [New] The type of host sequence described by the features. Standard types are 'DNA', 'Protein' and 'RNA'. The optional &lt;name&gt; allows multiple ##Type definitions describing multiple GFF sets in one file, each which have a distinct type. If the name is not provided, then all the features in the file are of the given type. Thus, with this meta-comment, a single file could contain DNA, RNA and Protein features, for example, representing a single genomic locus or 'gene', alongside type-specific features of its transcribed mRNA and translated protein sequences. If no ##Type meta-comment is provided for a given GFF file, then the type is assumed to be DNA.\n\n ##DNA {seqname}\n ##acggctcggattggcgctggatgatagatcagacgac\n ##...\n ##end-DNA\n    /\n\n ##RNA &lt;seqname&gt;\n ##acggcucggauuggcgcuggaugauagaucagacgac\n ##...\n ##end-RNA\n    Similar to DNA. Creates an implicit ##Type RNA &lt;seqname&gt; directive.\n\n ##Protein &lt;seqname&gt;\n ##MVLSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSF\n ##...\n ##end-Protein\n    Similar to DNA. Creates an implicit ##Type Protein &lt;seqname&gt; directive.\n\n  ##sequence-region {seqname} {start} {end}\n    /\n</code></pre> <p>Here is an example of GFF2:  </p> <pre><code>##gff-version 2\nSEQ1    EMBL    atg 103 105 .   +   0\nSEQ1    netgene splice5 172 173 0.94    +   .\n# this is comment that will be skipped by the parser\nSEQ1    genie   sp5-10  168 177 2.1 +   .\nSEQ2    grail   ATG 17  19  2.1 -   0\nSEQ3    BLASTX    similarity    100 135 .   +   0   Target \"HBA_HUMAN\" ; E_value 0.0003 # this is also a comment that will be skipped by the parser\nSEQ3    BLASTX    similarity    235 260 .   +   2   Target \"HBA_HUMAN\" ; E_value 0.0005\nSEQ3    BLASTX    similarity    360 396 .   +   0   Target \"HBA_HUMAN\" ; E_value 0.001\n</code></pre>"},{"location":"bioinformatics/format/conversion/gxf/#gff3","title":"GFF3","text":"<p>(2004)  </p> <p>GFF3 addresses several shortcomings in its predecessor, GFF2. Actually it addresses the most common extensions to GFF, while preserving backward compatibility with previous formats. It has been conceptualized by Lincoln Stein. The First specification draft I found is from 10 September 2003 (version 1.00rc1). The first offical specification is the version 1 published the 30 September 2004.</p> <p>Last updated the 26 February 2013 with version 1.23. Here is the last description of the specifications: https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md</p> <p>The majors updates are:   * the limitations of the feature type (3rd column) that is constrained to be either a term from the Sequence Ontology or an SO accession number (2278 possibilities).  * Some attribute's tags have predefined meanings: ID, Name, Alias, Parent, Target, Gap, Derives_from, Note, Dbxref, Ontology_term, Is_circular.   * Parent, Alias, Note, Dbxref and Ontology_term attributes can have multiple values (separated with the comma \",\" character).   * The ID indicates the ID of the feature. The ID attribute is required for features that have children (e.g. gene and mRNAs), or for those that span multiple lines, but are optional for other features. IDs for each feature must be unique within the scope of the GFF file. In the case of discontinuous features (i.e., a single feature that exists over multiple genomic locations) the same ID may appear on multiple lines. All lines that share an ID must collectively represent a single feature.   * The reserved Parent attribute can be used to establish a part-of relationship between two features. A feature that has the Parent attribute set is interpreted as asserting that it is a part of the specified Parent feature</p>"},{"location":"bioinformatics/format/conversion/gxf/#gtf","title":"GTF","text":""},{"location":"bioinformatics/format/conversion/gxf/#gtf1","title":"GTF1","text":"<p>(2000 - generally called GTF)</p> <p>GTF stands for Gene Transfer Format.</p> <p>GTF borrows from the GFF file format [1], but has additional structure that warrants a separate definition and format name. The structure is similar to GFF, so the fields are:  </p> <pre><code>&lt;seqname&gt;&lt;source&gt;&lt;feature&gt;&lt;start&gt;&lt;end&gt;&lt;score&gt;&lt;strand&gt;&lt;frame&gt;&lt;attributes&gt;\n</code></pre> <p>In this paper from 2003 (Keibler E, Brent M: Eval: a software package for analysis of genome annotations. BMC Bioinformatics 2003, 4:50.) they say:</p> <pre><code>Annotations are submitted to Eval in GTF file format http://genes.cse.wustl.edu/GTF2.html, \na community standard developed in the course of several collaborative genome annotations projects \n[Reese MG, Hartzell G, Harris NL, Ohler U, Abril JF, Lewis SE. Genome annotation assessment in \nDrosophila melanogaster. Genome Res. 2000;10:483\u2013501. doi: 10.1101/gr.10.4.483. | Mouse Genome\nSequencing Consortium Initial sequencing and comparative analysis of the mouse genome. Nature. \n2002;420:520\u2013562. doi: 10.1038/nature01262.].\nAs such it can be run on the output of any annotation system.\n</code></pre> <p>So the oldest paper they point to is the one from Reese et al. from February 9, 2000 (Genome annotation assessment in Drosophila melanogaster) that says:</p> <pre><code>We found that the General Feature Format (GFF) (formerly known as the Gene Feature Finding \nformat) was an excellent fit to our needs. The GFF format is an extension of a simple name, \nstart, end record that includes some additional information about the sequence being annotated: \nthe source of the feature; the type of feature; the location of the feature in the sequence; and\na score, strand, and frame for the feature. It has an optional ninth field that can be used to \ngroup multiple predictions into single annotations.\nMore information can be found at the GFF web site:  http://www.sanger.ac.uk/Software/formats/GFF/. \nOur evaluation tools used a GFF parser for the PERL programming language that is also available \nat the GFF web site. We found that it was necessary to specify a standard set of feature names \nwithin the GFF format, for instance, declaring that submitters should describe coding exons with \nthe feature name CDS.\n</code></pre> <p>From this, we can understand that in ~2000 for the drosophila genome project they have use the GFF format with particuliar specification that lead to the emergence of the GTF format.</p> <p>In another paper, The Human Genome Browser at UCSC. Genome Res. 2002 Jun; 12(6): 996\u20131006. doi:10.1101/gr.229102 the authors say that the GTF format has been designed specifically for the human genome project:</p> <pre><code>Since August 2001, it has become possible for users to upload their own annotations for display\nin the browser. These annotations can be in the standard GFF format \n(http://www.sanger.ac.uk/Software/formats/GFF), or in some formats designed specifically for the \nhuman genome project including GTF, PSL, and BED. The formats are described in detail in the web\npage http://genome.cse.ucsc.edu/goldenPath/help/customTrack.html. Note that the GFF and GTF files\nmust be tab delimited rather than space delimited.\n</code></pre> <p>With this last paper, it's hard to understand from which project the GTF format is finally born.</p> <p>Until now I havn't find a comprehensive description of the original GTF version (Ensembl version ?), but based on some hints from the Masters Project Report of Evan Keibler <code>Eval: A Gene Set Comparison System</code> and from other ressources I can say that the GTF1 was similar to GTF2. With few differences listed here:</p> <ul> <li> <p>feature  </p> <pre><code>The feature field can take 5 values: `CDS`, `start_codon`, `stop_codon`, `exon` and `intron`.\n</code></pre> </li> <li> <p>strand  </p> <pre><code>The strand value must be `+`, `-`, or `.`.\n</code></pre> </li> </ul>"},{"location":"bioinformatics/format/conversion/gxf/#gtf2-and-gff25","title":"GTF2 and GFF2.5","text":"<p>(2003)  </p> <p>We can find in some places that GTF2 is similar to GFF2.5, but I do not know of a coherent explanation about it. It sounds definitely to be GTF format. The original GTF described by Ensembl has been adapted and became GTF2 for the need of the the Mouse/Human Annotation Collaboration.</p> <p>Here the description from the Brent Lab at the Washington University in St. Louis. Found from the Eval publication received the 18 July 2003 mentioning the address http://genes.cse.wustl.edu/GTF2.html that has been archived in the web-archive the 12/12/2003. Prior to the publication in BMC Bioinformatics (and after 1 January 2003 because it's the most recent  journal cited in his report) E. Kleiber released a Master project report named \"Eval: A Gene Set Comparison System\" where he mention and describe the GTF, maybe the first version of the GTF2 format.</p> <p>GTF borrows from the GFF file format [1], but has additional structure that warrants a separate definition and format name. The structure is similar to GFF, so the fields are:  </p> <pre><code>&lt;seqname&gt;&lt;source&gt;&lt;feature&gt;&lt;start&gt;&lt;end&gt;&lt;score&gt;&lt;strand&gt;&lt;frame&gt;&lt;attributes&gt;\n</code></pre> <p>Definition of these fields are:</p> <pre><code>&lt;seqname&gt;\n    The &lt;seqname&gt; field contains the name of the sequence which this gene is on.\n&lt;source&gt;\n    The &lt;source&gt; field should be a unique label indicating where the annotations came from \u2013 typically the name of either a prediction program or a public database.\n&lt;feature&gt;\n    The &lt;feature&gt; field can take 4 values: \"CDS\", \"start_codon\", \"stop_codon\" and \"exon\". The \u201cCDS\u201d feature represents the coding sequence starting with the first translated codon and proceeding to the last translated codon. Unlike Genbank annotation, the stop codon is not included in the \u201cCDS\u201d feature for the terminal exon. The \u201cexon\u201d feature is used to annotate all exons, including non-coding exons. The \u201cstart_codon\u201d and \u201cstop_codon\u201d features should have a total length of three for any transcript but may be split onto more than one line in the rare case where an intron falls inside the codon.\n&lt;start&gt;, &lt;end&gt;\n    Integer start and end coordinates of the feature relative to the beginning of the sequence named in &lt;seqname&gt;. &lt;start&gt; must be less than or equal to &lt;end&gt;. Sequence numbering starts at 1. Values of &lt;start&gt; and &lt;end&gt; must fall inside the sequence on which this feature resides.\n&lt;score&gt;\n    The &lt;score&gt; field is used to store some score for the feature. This can be any numerical value, or can be left out and replaced with a period.\n&lt;strand&gt;\n    '+' or '-'.\n&lt;frame&gt;\n   A value of 0 indicates that the first whole codon of the reading frame is located at 5'-most base. 1 means that there is one extra base before the first whole codon and 2 means that there are two extra bases before the first whole codon. Note that the frame is not the length of the CDS mod 3. If the strand is '-', then the first base of the region is value of &lt;end&gt;, because the corresponding coding region will run from &lt;end&gt; to &lt;start&gt; on the reverse strand.\n&lt;attributes&gt;\n    Each attribute in the &lt;attribute&gt; field should have the form: attribute_name \u201cattribute_value\u201d;\n    Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes.\n\n   All four features have the same two mandatory attributes at the end of the record:\n</code></pre> qualifier description gene_id A unique identifier for the genomic source of the transcript. Used to group transcripts into genes. transcript_id A unique identifier for the predicted transcript. Used to group features into transcripts. <pre><code>These attributes are designed for handling multiple transcripts from the same genomic region. Any other attributes or comments must appear after these two.\n\n[comments].\n    Any line may contain comments. Comments are indicated by the # character and everything following a # character on any line is a comment. As such, all fields are prohibited from containing # characters\n</code></pre> <p>Here an example of GTF:</p> <pre><code> Hs-Ch1  Twinscan    exon    150 200 .   +   .   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    exon    300 401 .   +   .   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    CDS 380 401 .   +   0   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    exon    501 650 .   +   .   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    CDS 501 650 .   +   2   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    exon    700 800 .   + .   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    CDS 700 707 .   +   2   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    exon    900 997 .   + .   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    start_codon 380 382 .   +   0   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    stop_codon  708 710 .   +   0   gene_id \"1\"; transcript_id \"1.a\";\n</code></pre>"},{"location":"bioinformatics/format/conversion/gxf/#gtf21","title":"GTF2.1","text":"<p>(2005)  </p> <p>Here the description from the Brent Lab at the Washington University in St. Louis. In this version, the feature field change a little bit and can contain 6 different types:</p> <pre><code>The following feature types are required: \"CDS\", \"start_codon\", \"stop_codon\".  \nThe features \"5UTR\", \"3UTR\", and \"exon\" are optional. All other features will be ignored.\n</code></pre>"},{"location":"bioinformatics/format/conversion/gxf/#gtf22","title":"GTF2.2","text":"<p>(2007)  </p> <p>In this version, they included specific 9th column terms: transcript_id, protein_id and gene_id. Here the description from the Brent Lab at the Washington University in St. Louis. The  field change a little bit and can contain 9 different types: <pre><code>The following feature types are required: \"CDS\", \"start_codon\", \"stop_codon\".  \nThe features \"5UTR\", \"3UTR\", \"inter\", \"inter_CNS\", \"intron_CNS\" and \"exon\" are optional.\n</code></pre> <p><code>inter</code> and <code>inter_CNS</code> should have an empty transcript_id and gene_id attribute: gene_id \"\"; transcript_id \"\";</p>"},{"location":"bioinformatics/format/conversion/gxf/#gtf25","title":"GTF2.5","text":"<p>(2012)  </p> <p>This version is unofficial. I call it like that to differentiate it against the other GTF flavors. This GTF flavor has been developed by the GENCODE project. Here is the first desciption of this format and the last desciption of this format. The  field changed a little bit and can contain 8 different types: gene, transcript, exon, CDS, UTR, start_codon, stop_codon, Selenocysteine. <p>The tags/key-name of the  field started with 9 mandatories and 34 optionals (30 from Havanna project and 4 specific to Genecode). The most recent description of the format shows that it has existed until 11 different mandatory tags, but depending of the version and the line (feature type) the number of mandatory tags has varied a lot. There are also 76 that are optionals (70 comes from of a special set of tags, and 6 are specifics). For GRCh38 annotation lifted back to GRCh3, there are 6 other optional tags."},{"location":"bioinformatics/format/conversion/gxf/#gtf3","title":"GTF3","text":"<p>(2015)  </p> <p>This version is unofficial. I call it like that to differentiate it against the other GTF flavors. Originally Ensembl has created the GTF format that has been then slightly modified into GTF2 and then broadly used. Ensembl has adopted GTF2 and used only 4 different type of feature (CDS, exon, start_codon, stop_codon) and a lot of specific attributes. Then they adopted from release 75 the GTF 2.5. More features types are used: gene, transcript, exon, CDS, Selenocysteine, start_codon, stop_codon, and UTR. Then from release 82 they move on in the format I call GTF3 where they replaced UTR by three_prime_utr and five_prime_utr.</p>"},{"location":"bioinformatics/format/conversion/gxf/#resume","title":"Resume","text":""},{"location":"bioinformatics/format/conversion/gxf/#timeline-of-the-different-formats","title":"Timeline of the different formats","text":""},{"location":"bioinformatics/format/conversion/gxf/#main-points-and-differences-between-gff-formats","title":"Main points and differences between GFF formats","text":"format version year col1 - seqname col2 - source col3 - feature col4 - start col5 - end col6 - score col7 - strand col8 - frame col9 - attribute Comment GFF1 1997 can be anything integer integer numerical value or 0 '+', '-' or '.' '0', '1', '2' or '.' This field is originaly called group. An optional string-valued field that can be used as a name to group together a set of records. Each String had to be under 256 characters + whole line under 32 000 characters long GFF2 2000 can be anything integer integer numerical value or  '.' '+', '-' or '.' '0', '1', '2' or '.' This optional must have an tag value structure following the syntax used within objects in a .ace file, flattened onto one line by semicolon separators. Tags must be standard identifiers ([A-Za-z][A-Za-z0-9_]). Free text values must be quoted with double quotes. Note: all non-printing characters in such free text value strings (e.g. newlines, tabs, control characters, etc) must be explicitly represented by their C (UNIX) style backslash-escaped representation (e.g. newlines as '\\n', tabs as '\\t'). As in ACEDB, multiple values can follow a specific tag. form: Target \"HBA_HUMAN\" 11 55 ; E_value 0.0003* The START and STOP codons are included in the CDS GFF3 2004 [a-zA-Z0-9.:^*$@!+_?-|] Column name changed by . This is constrained to be either a term from the Sequence Ontology or an SO accession number. integer integer numerical value or  '.' '+', '-', '.' or '?' Column name changed by  '0', '1', '2' or '.' Multiple tag=value pairs are separated by semicolons. URL escaping rules are used for tags or values containing the following characters: \",=;\". Spaces are allowed in this field, but tabs must be replaced with the %09 URL escape. Attribute values do not need to be and should not be quoted. The quotes should be included as part of the value by parsers and not stripped. form: ID=cds00004;Parent=mRNA00001,mRNA00002;Name=edenprotein.4. Some tags have predefined meaning, they start by capital letter.  The ID attributes are only mandatory for those features that have children (the gene and mRNAs), or for those that span multiple lines. Consequently features having parents must have the Parent attribute. The START and STOP codons are included in the CDS"},{"location":"bioinformatics/format/conversion/gxf/#main-points-and-differences-between-gtf-formats","title":"Main points and differences between GTF formats","text":"format version year col1 - seqname col2 - source col3 - feature col4 - start col5 - end col6 - score col7 - strand col8 - frame col9 - attribute Comment GTF1 2000 CDS, start_codon, stop_codon, exon, intron integer integer numerical value or  '.' '+', '-' or '.' '0', '1', '2' or '.' porbably similar to GTF2 probably similar to GTF2 GTF2 / GFF2.5 2003 CDS, start_codon, stop_codon, exon integer integer numerical value or  '.' '+' or '-' '0', '1', '2' or '.' Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes. form: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d; Two mandatory attributes: gene_id, transcript_id. Any other attributes or comments must appear after these two and will be ignored. Textual attributes should be surrounded by doublequotes. Unlike Genbank annotation, the stop codon is not included in the CDS for the terminal exon GTF2.1 2005 CDS, start_codon, stop_codon, exon, 5UTR, 3UTR integer integer numerical value or  '.' '+' or '-' '0', '1', '2' or '.' Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes. form: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d; Two mandatory attributes: gene_id, transcript_id. Any other attributes or comments must appear after these two and will be ignored. Textual attributes should be surrounded by doublequotes. Unlike Genbank annotation, the stop codon is not included in the CDS for the terminal exon GTF2.2 2007 CDS, start_codon, stop_codon, 5UTR, 3UTR, inter, inter_CNS, intron_CNS and exon integer integer numerical value or  '.' '+' or '-' '0', '1', '2' or '.' Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes. form: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d; Two mandatory attributes: gene_id, transcript_id. Any other attributes or comments must appear after these two and will be ignored. Textual attributes should be surrounded by doublequotes. Unlike Genbank annotation, the stop codon is not included in the CDS for the terminal exon GTF2.5 2012 gene, transcript, exon, CDS, UTR, start_codon, stop_codon, Selenocysteine integer integer numerical value or  '.' '+' or '-' '0', '1', '2' or '.' Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes. form: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d; ~9 mandatory tags but this number varies depending of the version and the type of feature. Number of optional tag varies between 34 and 82 depending of the version. Textual attributes should be surrounded by doublequotes. Unlike Genbank annotation, the stop codon is not included in the CDS for the terminal exon GTF3 2015 gene, transcript, exon, CDS, Selenocysteine, start_codon, stop_codon, three_prime_utr and five_prime_utr integer integer numerical value or  '.' '+' or '-' '0', '1', '2' or '.' Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes. form: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d; Two mandatory attributes: gene_id, transcript_id. Any other attributes or comments must appear after these two and will be ignored. Textual attributes should be surrounded by doublequotes. Unlike Genbank annotation, the stop codon is not included in the CDS for the terminal exon"},{"location":"bioinformatics/format/conversion/gxf/#discussion","title":"Discussion","text":"<p>The main differences between GTF and GFF formats are the 3rd and 9th colomn. The feature type value of the 3rd column in GTF is constrained by a list of few feature types (&lt;10) while in GFF it is much more vast. It was not constrained until version 3 where it is now constrained to be either a term from the Sequence Ontology or an SO accession number ( 2278 possible terms ).  </p> <p>The structure of the 9th column is slightly different between the two formats:   * GTF2.2: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d;   * GFF3: ID=cds00004;Parent=mRNA00001,mRNA00002;Name=edenprotein.4 </p> <p>Within that column, the mandatory attributes are different.</p> <p>Feature type limitation wihtin GTF </p> <p>As the feature types of the 3rd column is limited by the GTF format, many groups/infrastructure use the 9th column to describe other features like tRNA, pseudogenes, etc. As an example, ENSEMBL use the attribute gene_biotype to define if a transcript feature is coding or non-coding.</p>"},{"location":"bioinformatics/format/conversion/gxf/#extra","title":"Extra","text":""},{"location":"bioinformatics/format/conversion/gxf/#problems-encountered-due-to-lack-of-standardization","title":"Problems encountered due to lack of standardization","text":"<p>Inconsistency in stop codon treatment in GTF tracks (from https://genome.ucsc.edu/FAQ/FAQtracks.html):  </p> <p>I've been doing some comparative gene set analysis using the gene annotation tracks and I believe I have run into an inconsistency in the way that stop codons are treated in the annotations. Looking at the Human June 2002 assembly, the annotations for Ensembl, Twinscan, SGP, and Geneid appear to exclude the stop codon in the coding region coordinates. All of the other gene annotation sets include the stop codon as part of the coding region. My guess is that this inconsistency is the result of the gene sets being imported from different file formats. The GTF2 format does not include the stop codon in the terminal exon, while the GenBank format does, and the GFF format does not specify what to do.</p> <p>Answer:  </p> <p>Your guess is correct. We haven't gotten around to fixing this situation. A while ago, the Twinscan group made a GTF validator. It interpreted the stop codon as not part of the coding region. Prior to that, all GFF and GTF annotations that we received did include the stop codon as part of the coding region; therefore, we didn't have special code in our database to enforce it. In response to the validator, Ensembl, SGP and Geneid switched their handling of stop codons to the way that Twinscan does it, hence the discrepancy.</p> <p>Inconsistency in GTF format (reported by Evan Keibler in his Masters Project Report):  </p> <p>Although the GTF file format is a fairly simple and well defined format, data is often claimed to be in GTF format when it does not comply completely with the specification. Most data is generated in some proprietary format specific to the particular program or lab which produced it. These proprietary formats often differ in small subtle ways, such as the sequence being indexed starting at position 0 or 1, or the start/stop codon being inside or outside of the initial/terminal exon. If the data is to be effectively shared with others it must be in a standard, well defined format. Though many labs do convert their data to GTF format, the files they generate rarely comply completely with the specification. For this reason the GTF validator was created. The validator allows the user to verify that the data is in correct GTF format before sharing with others. This makes communication more efficient because the receiver does not have to locate and fix the subtle differences between the many file formats.</p>"},{"location":"bioinformatics/format/conversion/gxf/#ensembl-gtf-formats","title":"Ensembl GTF formats","text":""},{"location":"bioinformatics/format/conversion/gxf/#evolution-of-the-3rd-and-9th-column","title":"Evolution of the 3rd and 9th column","text":"<p>Here the example of the human annotation: </p> annotation file ensembl version nb feature type (3rd column) nb attribute tag (9th column) Homo_sapiens.NCBI36.43.gtf 43 4: CDSexonstart_codonstop_codon 6: exon_numbergene_idgene_nameprotein_idtranscript_idtranscript_name Homo_sapiens.GRCh37.74.gtf 74 4: CDSexonstart_codonstop_codon 8: exon_idexon_numbergene_biotypegene_idgene_nameprotein_idtranscript_idtranscript_name Homo_sapiens.GRCh37.75.gtf 75 8: CDSSelenocysteineUTRexongenestart_codonstop_codontranscript 12: ccds_idexon_idexon_numbergene_biotypegene_idgene_namegene_sourceprotein_idtag<sup>*</sup>transcript_idtranscript_nametranscript_source Homo_sapiens.GRCh37.81.gtf 81 8: CDSSelenocysteineUTRexongenestart_codonstop_codontranscript 22: ccds_idexon_idexon_numberexon_versiongene_biotypegene_idgene_namegene_sourcegene_versionhavana_genehavana_gene_versionhavana_transcripthavana_transcript_versionprotein_idprotein_versiontag<sup>*</sup>transcript_biotypetranscript_idtranscript_nametranscript_sourcetranscript_support_leveltranscript_version Homo_sapiens.GRCh37.82.gtf 82 9: CDSSelenocysteineexonfive_prime_utrgenestart_codonstop_codonthree_prime_utrtranscript 22: same as before Homo_sapiens.GRCh38.95.gtf 95 9: CDSSelenocysteineexonfive_prime_utrgenestart_codonstop_codonthree_prime_utrtranscript 18: ccds_idexon_idexon_numberexon_versiongene_biotypegene_idgene_namegene_sourcegene_versionprotein_idprotein_versiontag<sup>*</sup>transcript_biotypetranscript_idtranscript_nametranscript_sourcetranscript_support_leveltranscript_version <sup>*</sup>Tags are additional flags used to indicate attibutes of the transcript."},{"location":"bioinformatics/format/conversion/gxf/#difference-between-gencode-and-ensembl-gtf","title":"Difference between GENCODE and Ensembl GTF","text":"<p>From here.  </p> <p>The gene annotation is the same in both files. The only exception is that the genes which are common to the human chromosome X and Y PAR regions can be found twice in the GENCODE GTF, while they are shown only for chromosome X in the Ensembl file.</p> <p>In addition, the GENCODE GTF contains a number of attributes not present in the Ensembl GTF, including annotation remarks, APPRIS tags and other tags highlighting transcripts experimentally validated by the GENCODE project or 3-way-consensus pseudogenes (predicted by Havana, Yale and UCSC). See our complete list of tags for more information.</p> <p>Please note that the Ensembl GTF covers the annotation in all sequence regions whereas GENCODE produces a similar file but also a GTF file with the annotation on the reference chromosomes only.</p>"},{"location":"bioinformatics/format/handling/split_fasta/","title":"Split a FASTA file","text":""},{"location":"bioinformatics/format/handling/split_fasta/#review-of-the-main-ways-to-split-a-fasta-file","title":"Review of the main ways to split a FASTA file","text":"tool language One sequence per file Can select nb of output files Can select nb seq by file Can select size of output files Overlap possible (when sequence cut) Can cut sequences Subsample possible Example Comment awk awk yes no yes no no no no example split bash yes no yes yes no no no example Fasta must be single line fasta (one header + one single sequence line) bash bash yes no no no no no no example Individual files will have the name of the corresponding sequence, without leading &gt; gaas_fasta_splitter.pl from GAAS Perl yes yes yes no yes yes yes (stop when nb of files with the nb of seq asked reached) example PyFasta Python yes yes no no yes yes NA example pyfaidx Python yes no no no no no no example GenomeTools Mostly C yes yes no yes no no no example seqretsplit from EMBOSS C yes no no no no no no example bp_seqretsplit.pl from Bioperl perl yes no no no no no no example faSplit from Kent utils C yes yes no yes yes yes no example partition.sh from BBMap Java no yes no no no no no example multithreaded seqkit Go yes yes yes no no no yes (subsequence of given region) example SEDA java yes yes yes no no no yes (randomizable) example GUI only. Using <code>Independent extractions</code> and <code>Randomize</code> options give the possibility to get sequences picked several times. There is an extra function called regular expression split (use of regex for selecting sequence by matching headers)"},{"location":"bioinformatics/format/handling/split_fasta/#example","title":"Example","text":""},{"location":"bioinformatics/format/handling/split_fasta/#awk","title":"Awk","text":"<p>size = chunk size pre = output file prefix pad = padding width (the width of the numeric suffix).</p> <pre><code>awk -v size=1000 -v pre=prefix -v pad=5 '\n   /^&gt;/ { n++; if (n % size == 1) { close(fname); fname = sprintf(\"%s.%0\" pad \"d\", pre, n) } }\n   { print &gt;&gt; fname }\n' input.fasta\n</code></pre>"},{"location":"bioinformatics/format/handling/split_fasta/#split","title":"Split","text":"<p><code>split -l 2000 input.fasta</code></p>"},{"location":"bioinformatics/format/handling/split_fasta/#bash","title":"Bash","text":"<pre><code>while read line\ndo\n    if [[ ${line:0:1} == '&gt;' ]]\n    then\n        outfile=${line#&gt;}.fa\n        echo $line &gt; $outfile\n    else\n        echo $line &gt;&gt; $outfile\n    fi\ndone &lt; myseq.fa\n</code></pre>"},{"location":"bioinformatics/format/handling/split_fasta/#gaas","title":"GAAS","text":"<p>split the fasta file into one file per sequence</p> <p><code>gaas_fasta_splitter.pl -f input.fa --nb_seq_by_chunk 1</code></p> <p>split the fasta file into files of 100 sequences</p> <p><code>gaas_fasta_splitter.pl  --nb_seq_by_chunk 100</code></p> <p>split the fasta file into 10 files</p> <p><code>gaas_fasta_splitter.pl  --nb_chunks 10</code></p> <p>split the fasta file into 10 files and cut the sequence in chunk of 1000000 bp</p> <p><code>gaas_fasta_splitter.pl  --nb_chunks 10 --size_seq 1000000</code></p> <p>split the fasta file into 10 files and cut the sequence in chunk of 1000000 bp with overlap of 2000 bp</p> <p><code>gaas_fasta_splitter.pl  --nb_chunks 10 --size_seq 1000000 --overlap 2000</code></p> <p>split the fasta file into 10 files of 20 sequences and the original sequences are cut in chunk of 1000000 bp with overlap of 2000 bp. If all the input data cannot be contained into the 10 files of 20 sequences, the output is actually a subsample of the input data.</p> <p><code>gaas_fasta_splitter.pl  --nb_chunks 10 --nb_seq_by_chunk 20 --size_seq 1000000 --overlap 2000</code></p>"},{"location":"bioinformatics/format/handling/split_fasta/#pyfasta","title":"PyFasta","text":"<p>split a fasta file into 6 new files of relatively even size:</p> <p><code>pyfasta split -n 6 original.fasta</code></p> <p>split the fasta file into one new file per header with \u201c%(seqid)s\u201d being filled into each filename.:</p> <p><code>pyfasta split \u2013header \u201c%(seqid)s.fasta\u201d original.fasta</code></p> <p>create 1 new fasta file with the sequence split into 10K-mers:</p> <p><code>pyfasta split -n 1 -k 10000 original.fasta</code></p> <p>2 new fasta files with the sequence split into 10K-mers with 2K overlap:</p> <p><code>pyfasta split -n 2 -k 10000 -o 2000 original.fasta</code></p>"},{"location":"bioinformatics/format/handling/split_fasta/#pyfaidx","title":"pyfaidx","text":"<p><code>faidx --split-files original.fasta</code></p>"},{"location":"bioinformatics/format/handling/split_fasta/#genometools","title":"GenomeTools","text":"<p><code>gt splitfasta -splitdesc multifastafile.fa</code></p>"},{"location":"bioinformatics/format/handling/split_fasta/#emboss","title":"EMBOSS","text":"<p><code>seqretsplit input.fa</code></p>"},{"location":"bioinformatics/format/handling/split_fasta/#bp_seqretsplit","title":"bp_seqretsplit","text":"<p><code>bp_seqretsplit file1 file2</code></p> <p>Similar to: <pre><code>#!/usr/bin/env perl\n\nuse strict;\nuse warnings;\nuse Bio::SeqIO;\nmy $in = Bio::SeqIO-&gt;new(-format =&gt; 'fasta',\n                         -fh   =&gt; \\*ARGV);\nwhile( my $s = $in-&gt;next_seq ) {\n    my ($id) = ($s-&gt;id =~ /^(?:\\w+)\\|(\\S+)\\|/);\n    Bio::SeqIO-&gt;new(-format =&gt; 'fasta',\n                    -file   =&gt; \"&gt;\".$id.\".fasta\")-&gt;write_seq($s);\n}\n</code></pre></p>"},{"location":"bioinformatics/format/handling/split_fasta/#fasplit","title":"faSplit","text":"<p>Break up scaffolds.fa using sequence names as file names (one sequence per file). Use the terminating / on the outRoot to get it to work correctly:</p> <p><code>faSplit byname scaffolds.fa outRoot/</code></p> <p>break up estAll.fa into 100 files (numbered est001.fa est002.fa, ... est100.fa Files will only be broken at fa record boundaries:</p> <p><code>faSplit sequence estAll.fa 100 est</code></p> <p>break up chr1.fa into 10 files:</p> <p><code>faSplit base chr1.fa 10 1_</code></p> <p>break up input.fa into 2000 base chunks:</p> <p><code>faSplit size input.fa 2000 outRoot</code></p> <p>break up est.fa into files of about 20000 bytes each by record:</p> <p><code>faSplit about est.fa 20000 outRoot</code></p> <p>Break up chrN.fa into files of at most 20000 bases each,  at gap boundaries if possible.  If the sequence ends in N's, the last piece, if larger than 20000, will be all one piece:</p> <p><code>faSplit gap chrN.fa 20000 outRoot</code></p>"},{"location":"bioinformatics/format/handling/split_fasta/#bbmap","title":"BBMap","text":"<p>Split the fasta file into 5 files:</p> <p><code>partition.sh in=file.fasta out=part%.fasta ways=5</code></p>"},{"location":"bioinformatics/format/handling/split_fasta/#reference","title":"Reference","text":"<p>https://www.biostars.org/p/229441/</p>"},{"location":"bioinformatics/format/specification/bam_and_sam/","title":"BAM / SAM","text":""},{"location":"bioinformatics/format/specification/bam_and_sam/#specifications","title":"Specifications","text":""},{"location":"bioinformatics/format/specification/bam_and_sam/#the-md-tag","title":"The MD tag","text":"<p>The MD Tags in BAM Files The history the MD tag and the CIGAR X operator</p>"},{"location":"bioinformatics/format/specification/bed/","title":"BED v1","text":""},{"location":"bioinformatics/format/specification/cigar/","title":"The CIGAR string","text":"<p>The CIGAR format is quite diverce and it is sometimes hard to understand it. Here is a review of the CIGAR string and its history.</p>"},{"location":"bioinformatics/format/specification/cigar/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Forewords</li> <li>Evolution of the CIGAR string<ul> <li>Original Exonerate CIGAR (From 2001)</li> <li>Ensembl CIGAR</li> <li>1st Update of the Exonerate CIGAR string - Gap attribute in GFF3(2004)</li> <li>2nd Update of the Exonerate CIGAR string - Gap attribute in GFF3(2005)</li> <li>3rd Update of the Exonerate CIGAR string - Gap attribute in GFF3</li> <li>1st Samtools CIGAR specification (~2009)</li> <li>2nd Samtools CIGAR (Extended CIGAR)</li> </ul> </li> <li>In sum<ul> <li>Quick comparison between the different CIGAR string flavors</li> <li>All CIGAR operators gathered in one table</li> </ul> </li> <li>Important resources used to write the review</li> </ul>"},{"location":"bioinformatics/format/specification/cigar/#forewords","title":"Forewords:","text":"<p>CIGAR is an acronym for Concise Idiosyncratic Gapped Alignment Report and has been originally defined by the Exonerate alignment program.  The CIGAR format is designed to contain the minimal information necessary for the reconstruction of an alignment. One alignment is described per line, to allow easy manipulation with UNIX tools.Exonerate CIGAR format does not include nucleotides.  </p> <p>It exists other related format:     - Sugar - Simple Ungapped Alignment Report   - Vulgar - Verbose Ugly Labelled Gapped Alignment Report  </p> <p>What means idiosyncratic ?   An idiosyncrasy is an unusual feature of the tool (though there are also other uses). It also means odd habit. The term is often used to express eccentricity or peculiarity. Below is the idiodyncracies/conventions describefd in the man page of exonerate-1.0.0:</p> <pre><code>CONVENTIONS\n   A  number  of conventions (and idiosyncracies) are used within exonerate.  An understanding of them facili-\n   tates interpretation of the output.\n\n   Coordinates\n          An in-between coordinate system is used, where the positions are counted between the symbols, rather\n          than on the symbols.  This numbering scheme starts from zero.  This numbering is shown below for the\n          sequence \"ACGT\":\n\n           A C G T\n          0 1 2 3 4\n\n          Hence the subsequence \"CG\" would have start=1, end=3, and length=2.  This coordinate system is  used\n          internally  in  exonerate,  and for all the output formats produced with the exception of the \"human\n          readable\" alignment display and the GFF output where convention and standards dictate otherwise.\n\n   Reverse Complements\n          When an alignment is reported on the reverse complement of a sequence, the  coordinates  are  simply\n          given  on  the  reverse complement copy of the sequence.  Hence positions on the sequences are never\n          negative.  Generally, the forward strand is indicated by '+', the reverse  strand  by  '-',  and  an\n          unknown or not-applicable strand (as in the case of a protein sequence) is indicated by '.'\n\n   Alignment Scores\n          Currently,  only  the raw alignment scores are displayed.  This score just is the sum of transistion\n          scores used in the dynamic programming.  For example, in the case  of  a  Smith-Waterman  alignment,\n          this will be the sum of the substitution matrix scores and the gap penalties.\n</code></pre>"},{"location":"bioinformatics/format/specification/cigar/#evolution-of-the-cigar-string","title":"Evolution of the CIGAR string","text":""},{"location":"bioinformatics/format/specification/cigar/#original-exonerate-cigar-from-2001","title":"Original Exonerate CIGAR (From 2001)","text":"<p>We cannot talk about the CIGAR format without talking first about the SUGAR format. Sugar is Simple UnGapped Alignment Report, which displays ungapped alignments one-per-line. The sugar line starts with the string \"sugar:\" for easy extraction from the output, and is followed by the following 9 fields in the order below:</p> <ol> <li>query identifier  </li> <li>query start position  </li> <li>query stop position  </li> <li>query strand  </li> <li>target identifier  </li> <li>target start position  </li> <li>target stop position  </li> <li>target strand  </li> <li>score </li> </ol> <p>Here an example of SUGAR format: <code>sugar: hs989235.cds 5 468 + hsnfg9.embl 25689 27450 + 1916</code></p> <p>The CIGAR format starts  with  the same 9 fields as SUGAR output (see above), and is followed by a series of  pairs where operation is one of match, insert or delete, and the length describes the number of times this operation is repeated Cigar format looks like this: <p><code>cigar: hs989235.cds 15 459 - hsnfg9.embl 25698 27440 - 1820.20 M 22 D 1 M 12 D 1 M 16 N 898 M 12 D 1 M 164 I 1 M 37 N 404 M 133 D 1 M 4 D 1 M 39</code></p> <p>The 10th field is actually the CIGAR string and are defined in pairs. Each pair is also called a run. The cigar string describes the edit path throught the alignment. These contain a M,I and D corresponding to a Match, Insert and Delete, followed by the length.</p> <p>/!\\ the N operator:  The ensembl documentation from 13 November 2001 says about the exonerate's operators: <code>These contain a M,I,D or N corresponding to a Match, Insert, Delete or iNtron, followed by the length.</code> Delete and intron are finaly a similar concept and I have rarely meet a N operator except in the CIGAR example above (from ensembl Wiki November 2001). In the first exonerate documentation I found (0.7.0 with a man page from November 2002) - I didn't succed to retrieve information about the first version (0.3d) of exonerate that has been mentioned in Nature december 2001 (https://doi.org/10.1038/414865a)) they do not talk about the intron (N) operator. So, we could imagine that N was initially present and has been then removed before November 2002 from exonerate but kept in a not updadted documentation of Ensembl.</p> Operator Description M Match I Insert D Delete <p>To resume: Each pair/run is encoded by the letter code/operator, whitespace, and the length; multiple pairs/runs are separated by whitespace.</p>"},{"location":"bioinformatics/format/specification/cigar/#ensembl-cigar","title":"Ensembl CIGAR","text":"<p>Then Ensembl has created the ensembl cigar format.</p> <p>In the Ensembl CIGAR format the numbers and letters are switched, and there are no gaps in the string. So the above example in Ensembl would appear in a feature table in three rows with these CIGAR strings:</p> <p>13M1I35M1I4M1I13M1D4M1I115M 37M1D164M1I12M 16M1I12M1I21M1D10M</p> <p>/!\\ What about N for iNtron ? The ensembl page describe the CIGAR string from exonerate like that: <code>The cigar string describes the edit path throught the alignment. These contain a M,I,D or N corresponding to a Match, Insert, Delete or iNtron, followed by the length.</code> I don't know where that N is coming from, I havn't find any ressource using/talking about the N (iNtron) operator. It seems to be used by D systemtically. Any information about it is very welcome.</p>"},{"location":"bioinformatics/format/specification/cigar/#1st-update-of-the-exonerate-cigar-string-gap-attribute-in-gff32004","title":"1st Update of the Exonerate CIGAR string - Gap attribute in GFF3(2004)","text":"<p>The GFF3 format integrated a Gap attribute in the 9th column of the gff\" files to describe alignements. Here is a full description. </p> <p>Here the essentail we have to retain:</p> <pre><code>Gap   The alignment of the feature to the target if the two are\n      not colinear (e.g. contain gaps).  The alignment format is\n  taken from the CIGAR format described in the \n  Exonerate documentation.http://cvsweb.sanger.ac.uk/cgi-bin/cvsweb.cgi/exonerate\n       ?cvsroot=Ensembl).See \"THE GAP ATTRIBUTE\" for a description\n   of this format.\n[...]\nTHE GAP ATTRIBUTE\n-----------------\n[...]\nGFF3 recommends representing gapped alignments\nexplicitly with the \"Gap\" attribute.  The Gap attribute's format\nconsists of a series of (operation,length) pairs separated by \"+\"\nsigns, for example M8+D3+M6.  Each operation is a single-letter code.\n</code></pre> <p>Here are the different operators:</p> Operator/Code Description/Operation M match I insert a gap into the reference sequence D insert a gap into the target (delete from reference) F frameshift forward in the reference sequence R frameshift reverse in the reference sequence <p>Compare to the original CIGAR string there is no more whitespace between the letter code and the length.  </p> <p>Here an example of this type of CIGAR string DNA/DNA: </p> <pre><code>    Chr3  (reference)  1 CAAGACCTAAACTGGAT-TCCAAT  23\n    EST23 (target)     1 CAAGACCT---CTGGATATCCAAT  21\n\nIn the alignment between EST23 and Chr3 shown above, Chr3 is the\nreference sequence referred to in the first column of the GFF3 file,\nand EST23 is the sequence referred to by the Target attribute.  This\ngives a Gap string of \"M8 D3 M6 I1 M6\". The full GFF match line will\nread:\n\n   Chr23 . Match 1 23 . . . ID=Match1;Target=EST23+1+21;Gap=M8+D3+M6+I1+M6\n\n&gt;Gap=M8+D3+M6+I1+M6\n</code></pre> <p>Here an example of this type of CIGAR string AA/DNA: </p> <pre><code>For protein to nucleotide matches, the M, I and D operations apply to\namino acid residues in the target and nucleotide base pairs in the\nreference in a 1:3 residue.  That is, \"M2\" means to match two amino\nresidues in the target to six base pairs in the reference.  Hence this\nalignment:\n\n 100 atgaaggag---gttattgcgaatgtcggcggt\n   1 M..K..E..V..V..I..-..N..V..G..G..\n\nCorresponds to this GFF3 Line:\n\n ctg123 . nucleotide_to_protein 100 129 . + . ID=match008;Target=p101+1+10;Gap=M3+I1+M2+D1+M4\n</code></pre> <p>/!\\ They apprarently also mix-up abilities from the CIGAR string format and those from the VULGAR string format. Indeed they added the F and R operators, and the F was by the VULGAR format.</p> <p>Here the explanation about the F and R operators:  </p> <pre><code>In addition, the Gap attribute provides orward and everse\nframeshift operators to allow for frameshifts in the alignment.  These\nare in nucleotide coordinates: a forward frameshift skips forward the\nindicated number of base pairs, while a reverse frameshift moves\nbackwards.  Examples:\n\n\n 100 atgaaggag---gttattgaatgtcggcggt     Gap=M3+I1+M2+F1+M4\n   1 M..K..E..V..V..I...\n            N..V..G..G\n\n\n 100 atgaaggag---gttataatgtcggcggt        Gap=M3+I1+M2+R1+M4\n   1 M..K..E..V..V..I.\n              N..V..G..G\n</code></pre>"},{"location":"bioinformatics/format/specification/cigar/#2nd-update-of-the-exonerate-cigar-string-gap-attribute-in-gff32005","title":"2nd Update of the Exonerate CIGAR string - Gap attribute in GFF3(2005)","text":"<p>The main difference lies in the replacement of the + character by a space.  </p> <p>Here the essentail we have to retain:</p> <pre><code>THE GAP ATTRIBUTE\n-----------------\n[...]\nGFF3 recommends representing gapped alignments\nexplicitly with the \"Gap\" attribute.  The Gap attribute's format\nconsists of a series of (operation,length) pairs separated by spac\ncharacters, for example \"M8 D3 M6\".  Each operation is a single-letter code.\n</code></pre> <p>Here an example of this type of CIGAR string DNA/DNA: </p> <pre><code>    Chr3  (reference)  1 CAAGACCTAAACTGGAT-TCCAAT  23\n    EST23 (target)     1 CAAGACCT---CTGGATATCCAAT  21\n\nIn the alignment between EST23 and Chr3 shown above, Chr3 is the\nreference sequence referred to in the first column of the GFF3 file,\nand EST23 is the sequence referred to by the Target attribute.  This\ngives a Gap string of \"M8 D3 M6 I1 M6\". The full GFF match line will\nread:\n\n   Chr23 . Match 1 23 . . . ID=Match1;Target=EST23 1 21;Gap=M8 D3 M6 I1 M6\n\n&gt;Gap=M8 D3 M6 I1 M6\n</code></pre> <p>Here an example of this type of CIGAR string AA/DNA: </p> <pre><code>For protein to nucleotide matches, the M, I and D operations apply to\namino acid residues in the target and nucleotide base pairs in the\nreference in a 1:3 residue.  That is, \"M2\" means to match two amino\nresidues in the target to six base pairs in the reference.  Hence this\nalignment:\n\n 100 atgaaggag---gttattgcgaatgtcggcggt\n   1 M..K..E..V..V..I..-..N..V..G..G..\n\nCorresponds to this GFF3 Line:\n\n ctg123 . nucleotide_to_protein 100 129 . + . ID=match008;Target=p101 1 10;Gap=M3 I1 M2 D1 M4\n\nIn addition, the Gap attribute provides &lt;F&gt;orward and &lt;R&gt;everse\nframeshift operators to allow for frameshifts in the alignment.  These\nare in nucleotide coordinates: a forward frameshift skips forward the\nindicated number of base pairs, while a reverse frameshift moves\nbackwards.  Examples:\n\n\n 100 atgaaggag---gttattgaatgtcggcggt     Gap=M3 I1 M2 F1 M4\n   1 M..K..E..V..V..I...\n            N..V..G..G\n\n\n 100 atgaaggag---gttataatgtcggcggt        Gap=M3 I1 M2 R1 M4\n   1 M..K..E..V..V..I.\n              N..V..G..G\n</code></pre>"},{"location":"bioinformatics/format/specification/cigar/#3rd-update-of-the-exonerate-cigar-string-gap-attribute-in-gff3","title":"3rd Update of the Exonerate CIGAR string - Gap attribute in GFF3","text":"<p>I don't know when this update occured.  They decide to mix up the Exonerate specification with the BaseAlignFormat format used by Ensembl. In this specification the numbers and letters are switched, they remove space between pairs and decided that for segments of length 1 the number can be omitted, so \"8M1D6M\" is equal to \"8MD6M\".  Here the full description.</p> <p>Here one example of this format:  </p> <p>Gap=M3IM2RM4</p>"},{"location":"bioinformatics/format/specification/cigar/#1st-samtools-cigar-specification-2009","title":"1st Samtools CIGAR specification (~2009)","text":"<p>SAMtools created the extended cigar string. Here is a priori the original specification of the Samtools CIGAR format:</p> Operator Description D Deletion; the nucleotide is present in the reference but not in the read H Hard Clipping; the clipped nucleotides are not present in the read. I Insertion; the nucleotide is present in the read \u00a0but not in the reference. M Match; can be either an alignment match or mismatch. The nucleotide is present in the reference. N Skipped region; a region of nucleotides is not present in the read P Padding; padded area in the read and not in the reference S Soft Clipping;\u00a0 the clipped nucleotides are present in the read <p>In this variant, whitespace is removed and the order of the letter code and length are reversed (length appears before letter code) compared to the Exonerate CIGAR string.  So it could looks like that:  </p> <p>24M3I7M2D19M</p>"},{"location":"bioinformatics/format/specification/cigar/#2nd-samtools-cigar-extended-cigar","title":"2nd Samtools CIGAR (Extended CIGAR)","text":"<p>The \u201cM\u201d didn't allow to differentiate between the matches and mismatches. So, \u201cX\u201d (substitution/Mismatch) and \u201c=\u201d  (match) have been added to the specification in response to the request of several important users (c.f. The history the MD tag and the CIGAR X operator). </p> <p>Here is the current specification of the Samtools CIGAR format:</p> Operator Description D Deletion; the nucleotide is present in the reference but not in the read H Hard Clipping; the clipped nucleotides are not present in the read. I Insertion; the nucleotide is present in the read \u00a0but not in the reference. M Match; can be either an alignment match or mismatch. The nucleotide is present in the reference. N Skipped region; a region of nucleotides is not present in the read P Padding; padded area in the read and not in the reference S Soft Clipping;\u00a0 the clipped nucleotides are present in the read X Read Mismatch; the nucleotide is present in the reference = Read Match; the nucleotide is present in the reference <p>So it could looks like that:  </p> <p>16=X7=3I7=2DX18=</p>"},{"location":"bioinformatics/format/specification/cigar/#in-sum","title":"In sum","text":""},{"location":"bioinformatics/format/specification/cigar/#quick-comparison-between-the-different-cigar-string-flavors","title":"Quick comparison between the different CIGAR string flavors","text":"Flavor Year Operator Example Description Original CIGAR ~2002 D,I,M M 37 D 1 M 164 I 1 M 12 D 898 M 16 I 1 M 12 I 1 M 21 D 1 M 10 Series of  pairs/runs, and the length describes the number of times this operation is repeated. Multiple pairs/runs are separated by whitespace. Ensembl CIGAR 2004 D,I,M 37M1D164M1I12M 16M1I12M1I21M1D10M The numbers and letters are switched, and there are no gaps in the string. If there is a gap it will become a new line in the output. GFF3 CIGAR v1 2004 D,F,I,M,R M8+D1+M6 As the original CIGAR except new operators and no more whitespace between the letter code and the length. Pairs separated by \"+\" signs GFF3 CIGAR v2 2005 D,F,I,M,R M8 D1 M6 As the original CIGAR except new operators and no more whitespace between the letter code and the length. Pairs separated by space characters GFF3 CIGAR v3 ? D,F,I,M,R 8MD6M remove space between pairs and decided that for segments of length 1 the number can be omitted Samtools CIGAR v1 2008 D,H,I,M,N,P,S 24M3I7M2D19M In this variant, whitespace is removed and the order of the letter code and length are reversed (length appears before letter code) compared to the Exonerate CIGAR string. It looks like GFF3 CIGAR v2, but with more operators. Samtools CIGAR v2 July 2009 D,H,I,M,N,P,S,X,= 16=X7=3I7=2DX18= Compare to Samtools CIGAR v1, add X and = to differentiate Match (M)"},{"location":"bioinformatics/format/specification/cigar/#all-cigar-operators-gathered-in-one-table","title":"All CIGAR operators gathered in one table","text":"<p>To gather all the operator information in one place, I did a union of the different operators of the different formats and end-up with this last table:</p> Operator Description D Deletion; the nucleotide is present in the reference but not in the read / insert a gap into the target (delete from reference) F Frameshift / frameshift forward in the reference sequence H Hard Clipping; the clipped nucleotides are not present in the read I Intron / the nucleotide is present in the read  but not in the reference. / insert a gap into the reference sequence M Match ; can be either an alignment match or mismatch. The nucleotide is present in the reference. N A region of nucleotides is not present in the read P Padding; padded area in the read and not in the reference R frameshift reverse in the reference sequence S Soft Clipping;  the clipped nucleotides are present in the read X Read Mismatch; the nucleotide is present in the reference = Read Match; the nucleotide is present in the reference"},{"location":"bioinformatics/format/specification/cigar/#important-resources-used-to-write-the-review","title":"Important resources used to write the review","text":"<p>http://lh3.github.io/2018/03/27/the-history-the-cigar-x-operator-and-the-md-tag https://github.com/vsbuffalo/devnotes/wiki/The-MD-Tag-in-BAM-Files EnsemblDocs Wiki LASTZ manual http://rice.bio.indiana.edu:7082/annot/gff3.html http://wiki.wormbase.org/index.php/GFF3specProposal exonerate manual web page </p>"},{"location":"bioinformatics/format/specification/cram/","title":"CRAM v3.1","text":""},{"location":"bioinformatics/format/specification/gxf/","title":"The GTF/GFF formats","text":"<p>The GTF/GFF formats are 9-column text formats used to describe and represent genomic features. The formats have quite evolved since 1997, and despite well-defined specifications existing nowadays they have a great flexibility allowing holding wide variety of information. This flexibility has a drawback aspect, there is an incredible amount of flavor of the formats: GFF / GFF1 / GFF2 / GFF2.5 / GFF3 / GTF / GTF2 / GTF2.1 / GTF2.2 / GTF2.5 / GTF3</p> <p>It's often hard to understand and differentiate all GFF/GTF formats/flavors. Many tools using GTF/GFF formats fails due to specific expectations. Here is a comprehensive overview of the formats and their histories to help disentangle this complexity.</p>"},{"location":"bioinformatics/format/specification/gxf/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Forewords</li> <li>Introduction</li> <li>GFF<ul> <li>GFF0 (before 13-11-1997)</li> <li>GFF1 (13-11-1997)</li> <li>GFF2 (29-09-2000)  </li> <li>GFF3 (2004)</li> </ul> </li> <li>GTF<ul> <li>GTF1 (2000)</li> <li>GTF2 and GFF2.5 (2003)</li> <li>GTF2.1 (2005)</li> <li>GTF2.2 (2007)</li> <li>GTF2.5 unofficial (2012)</li> <li>GTF3 unofficial (2013)</li> </ul> </li> <li>Resume<ul> <li>Timeline of the different formats</li> <li>Main points and differences between GFF formats</li> <li>Main points and differences between GTF formats</li> <li>Discussion</li> </ul> </li> <li>Extra<ul> <li>Problem encountered due to lack of standardization</li> <li>Ensembl GTF formats<ul> <li>Evolution of the 3rd and 9th column</li> <li>Difference between GENCODE and Ensembl GTF</li> </ul> </li> </ul> </li> </ul>"},{"location":"bioinformatics/format/specification/gxf/#forewords","title":"Forewords","text":"<p>\u21e8  When I use the term gff it includes all gff formats/flavors. (The first version of the format was not called gff1 but gff. But to make it easier I will always specify the version of the format saying gff1 when I talk about the first version of it).  </p> <p>\u21e8  In the same way, when I use the term gtf it includes all gtf formats/flavors.  </p> <p>\u21e8  I have created the term gxf that means all the gff and gtf formats/flavors.</p>"},{"location":"bioinformatics/format/specification/gxf/#introduction","title":"Introduction","text":"<p>GFF (Gene-Finding Format) is a general-purpose genome annotation format. It was conceived during a 1997 meeting on computational genefinding at the Isaac Newton Institute, Cambridge, UK and developed in collaboration between the Sanger Centre, the University of California at Santa Cruz and other participants (Holmes I: Studies in Probabilistic Sequence Alignment and Evolution. PhD thesis University of Cambridge 1998.). The key players have been Richard Durbin and David Haussler.  </p> <p>GFF is a one-line-per-record format that can be used to identify a substring of a biological sequence. It is an extension of a basic (name, start, end) tuple (or \"NSE\"). It was originally designed as a common format for sharing information between gene-finding sensors (finding signals: starts, splice sites, stops, motifs; finding regions: exons, introns, protein domains etc.), and gene predictors (predicting gene, RNA transcript or protein structures). These two steps were usually performed within the same program but thanks to the GFF format they can be decoupled, allowing the transfer of feature information from one tool to another. But its uses go beyond gene-finding and it is used as a convenient way to represent a set of many kinds of features. The GFF fomat has been developed to be easy to parse and process by a variety of programs in different languages (e.g Unix tools as grep and sort, perl, awk, etc.). For these reasons, they decided that each feature is described on a single line, and line order is not relevant.</p>"},{"location":"bioinformatics/format/specification/gxf/#gff","title":"GFF","text":""},{"location":"bioinformatics/format/specification/gxf/#gff0","title":"GFF0","text":"<p>(before 13-11-1997)  </p> <p>There is no clear information about how the format looked at that time but it was close to the GFF1 format specification without the field <code>source</code> added the 1997-11-13.</p>"},{"location":"bioinformatics/format/specification/gxf/#gff1","title":"GFF1","text":"<p>(13-11-1997)  </p> <p>For a complete description of the format please refer to this link: https://web.archive.org/web/19980222142332/http://www.sanger.ac.uk:80/~rd/gff.html. This is the oldest description of the format I found (1998-02-22).</p> <p>I consider the format as GFF1 when they definitely defined the 9th field of the format (1997-11-13 rd: added extra <code>source</code> field as discussed at Newton Institute meeting 971029). Before that, the format only existed in its 0th version.</p> <p>This GFF1 format contains 8 mandatory fields followed by one optional field. The fields are:  </p> <pre><code>&lt;seqname&gt; &lt;source&gt; &lt;feature&gt; &lt;start&gt; &lt;end&gt; &lt;score&gt; &lt;strand&gt; &lt;frame&gt; [group]\n</code></pre> <p>They are defined as follows:</p> <pre><code>&lt;seqname&gt;\n    The name of the sequence. Having an explicit sequence name allows a feature file to be prepared for a data set of multiple sequences. Normally the seqname will be the identifier of the sequence in an accompanying fasta format file. An alternative is that 'seqname' is the identifier for a sequence in a public database, such as an EMBL/Genbank/DDBJ accession number. Which is the case, and which file or database to use, should be explained in accompanying information.\n&lt;source&gt;\n    The source of this feature. This field will normally be used to indicate the program making the prediction, or if it comes from public database annotation, or is experimentally verified, etc.\n&lt;feature&gt;\n    The feature type name. We hope to suggest a standard set of features, to facilitate import/export, comparison etc.. Of course, people are free to define new ones as needed. For example, Genie splice detectors account for a region of DNA, and multiple detectors may be available for the same site, as shown above.\n&lt;start&gt;, &lt;end&gt;\n    Integers. &lt;start&gt; must be less than or equal to &lt;end&gt;. Sequence numbering starts at 1, so these numbers should be between 1 and the length of the relevant sequence, inclusive.\n&lt;score&gt;\n    A floating point value. When there is no score (i.e., for a sensor that just records the possible presence of a signal, as \"splice5\" above) you must give something, by convention 0.\n&lt;strand&gt;\n    One of '+', '-' or '.'. '.' should be used when strand is not relevant, e.g. for dinucleotide repeats.\n&lt;frame&gt;\n    One of '0', '1', '2' or '.'. '0' indicates that the specified region is in frame, i.e., that its first base corresponds to the first base of a codon. '1' indicates that there is one extra base, i.e., that the second base of the region corresponds to the first base of a codon, and '2' means that the third base of the region is the first base of a codon. If the strand is '-', then the first base of the region is value of &lt;end&gt;, because the corresponding coding region will run from &lt;end&gt; to &lt;start&gt; on the reverse strand.\n[group]\n    An optional string-valued field that can be used as a name to group together a set of records. Typical uses might be to group the introns and exons in one gene prediction (or experimentally verified gene structure), or to group multiple regions of match to another sequence, such as an EST or a protein. See below for examples.\n\n=&gt; All strings (i.e., values of the &lt;seqname&gt;, &lt;feature&gt; or &lt;group&gt; fields) should be under 256 characters long, and should not include whitespace. The whole line should be under 32k long. A character limit is not very desirable, but helps write parsers in some languages. The slightly silly 32k limit is to allow plenty of space for comments/extra data.\n=&gt; Fields must be separated by TAB characters ('\\t').\n</code></pre> <p>Extra features of the format:</p> <pre><code>Comments\n\nComments are allowed, starting with \"#\" as in Perl, awk etc. Everything following # until the end of the line is ignored. Effectively this can be used in two ways. Either it must be at the beginning of the line (after any whitespace), to make the whole line a comment, or the comment could come after all the required fields on the line.\nWe also permit extra information to be given on the line following the group field without a '#' character. This allows extra method-specific information to be transferred with the line. However, we discourage overuse of this feature: better to find a way to do it with more true feature lines, and perhaps groups.\n\n## comment lines for meta information\n\nThere is a set of standardised (i.e., parsable) ## line types that can be used optionally at the top of a gff file. The philosophy is a little like the special set of %% lines at the top of postscript files, used for example to give the BoundingBox for EPS files.\nCurrent proposed ## lines are:\n\n ##gff-version 1\nGFF version - in case it is a real success and we want to change it. The current version is 1.\n ##source-version {source} {version text}\nSo that people can record what version of a program or package was used to make the data in this file. I suggest the version is text without whitespace. That allows things like 1.3, 4a etc.\n ##date {date}\nThe date the file was made, or perhaps that the prediction programs were run. We suggest to use astronomical format: 1997-11-08 for 8th November 1997, first because these sort properly, and second to avoid any US/European bias.\n\n ##DNA {seqname}\n ##acggctcggattggcgctggatgatagatcagacgac\n ##...\n ##end-DNA\nTo give a DNA sequence. Several people have pointed out that it may be convenient to include the sequence in the file. It should not become mandatory to do so. Often the seqname will be a well-known identifier, and the sequence can easily be retrieved from a database, or an accompanying file.\n ##sequence-region {seqname} {start} {end}\nTo indicate that this file only contains entries for the the specified subregion of a sequence.\nPlease feel free to propose new ## lines. The ## line proposal came out of some discussions including Anders Krogh, David Haussler, people at the Newton Institute on 1997-10-29 and some email from Suzanna Lewis. Of course, naive programs can ignore all of these...\n</code></pre> <p>Here is an example of GFF1:  </p> <pre><code>##gff-version 1\nSEQ1    EMBL    atg 103 105 .   +   0\nSEQ1    EMBL    exon    103 172 .   +   0\nSEQ1    EMBL    splice5 172 173 .   +   .\nSEQ1    netgene splice5 172 173 0.94    +   .\n# this is comment that will be skipped by the parser\nSEQ1    genie   sp5-20  163 182 2.3 +   .\nSEQ1    genie   sp5-10  168 177 2.1 +   .\nSEQ2    grail   ATG 17  19  2.1 -   0\nSEQ3    pred    exon    100 135 .   +   0   locus1 # this is also a comment that will be skipped by the parser\nSEQ3    pred    exon    235 260 .   +   2   locus1 This is an example of extra information... They discourage overuse of this feature.\nSEQ3    pred    exon    360 396 .   +   0   locus1\n</code></pre>"},{"location":"bioinformatics/format/specification/gxf/#gff2","title":"GFF2","text":"<p>(29-09-2000)  </p> <p>/!\\ Note: Some of the changes we will see have been implemented before the offical release of GFF2. As a consequence, several interemediate states between version 1 and 2 have existed. We can call them GFF1.X. I will not further discuss these intermediate states.</p> <p>16/12/98: Discussions with Lincoln Stein and others, the Version 2 format of GFF is proposed.  </p> <p>17/11/99: Gene Feature Finding Version 2 format is conceptually generalized to be the General Feature Format</p> <p>The GFF2 format is conceptualized since the 16/12/98 but becomes officially the default version the 2000-9-29. Here is the official description which is a snapshot from here: https://web.archive.org/web/20010208224442/http://www.sanger.ac.uk:80/Software/formats/GFF/GFF_Spec.shtml.  </p> <p>You can find the first description (03 Feb 2000) of the GFF2 here that comes from here: ftp://ftp.sanger.ac.uk/pub/resources/software/gff-old/gff/.</p> <p>Here we will review changes from GFF1.</p> <p>=&gt; The Gene Feature Finding has been  generalized to accomodate RNA and Protein feature files and has been renamed the General Feature Format while retaining the same acronym GFF.  </p> <p>The main change from Version 1 to Version 2 is the revision of the optional 9th field with tag-value type structure (essentially semicolon-separated .ace format) used for any additional material on the line. Version 2 also allows '.' as a score, for features for which there is no score. With the changes taking place to version 2 of the format, we also allow for feature sets to be defined over RNA and Protein sequences, as well as genomic DNA. This is used for example by the EMBOSS project to provide standard format output for all features as an option. In this case the  and  fields should be set to '.'. To assist this transition in specification, a new #Type Meta-Comment has been added."},{"location":"bioinformatics/format/specification/gxf/#definition","title":"Definition","text":"<p>This GFF2 format contains 8 mandatory fields followed by optional fields. Fields are:  </p> <pre><code>&lt;seqname&gt; &lt;source&gt; &lt;feature&gt; &lt;start&gt; &lt;end&gt; &lt;score&gt; &lt;strand&gt; &lt;frame&gt; [group/attributes] [comments]\n</code></pre> <p>Differences in these fields from GFF1 are as follows:</p> <pre><code>&lt;seqname&gt;\n    /\n&lt;source&gt;\n    /\n&lt;feature&gt;\n    Version 2 change: Standard Table of Features - we would like to enforce a standard nomenclature for common GFF features. This does not forbid the use of other features, rather, just that if the feature is obviously described in the standard list, that the standard label should be used. For this standard table we propose to fall back on the international public standards for genomic database feature annotation, specifically, the DDBJ/EMBL/GenBank feature table.\n&lt;start&gt;, &lt;end&gt;\n    Version 2 change: version 2 condones values of &lt;start&gt; and &lt;end&gt; that extend outside the reference sequence. This is often more natural when dumping from acedb, rather than clipping. It means that some software using the files may need to clip for itself.\n&lt;score&gt;\n    Version 2 change: When there is no score (i.e., for a sensor that just records the possible presence of a signal, as for the EMBL features above) you should use '.' instead of 0.\n&lt;strand&gt;\n    Version 2 change: This field is left empty '.' for RNA and protein features.\n&lt;frame&gt;\n    Version 2 change: This field is left empty '.' for RNA and protein features.\n[group/attribute]\n    [New] Standard Table of Attribute Tag Identifiers The semantics of tags in attribute field tag-values pairs has not yet been completely formalized, however a useful constraint is that they be equivalent, where appropriate, to DDBJ/EMBL/GenBank feature 'qualifiers' of given features (see EMBL feature descriptions).\n\nIn addition to these, ACEDB typically dumps GFF with specific tag-value pairs for given feature types. These tag-value pairs may be considered 'standard' GFF tag-values with respect to ACEDB databases. (rbsk: These will be summarized in a table here in the near future)\n\nVersion 2 change: In version 2, the optional [group] field is renamed to [attribute] (09/99) and must have an tag-value structure following the syntax used within objects in a .ace file, flattened onto one line by semicolon separators. Tags must be standard identifiers ([A-Za-z][A-Za-z0-9_]*). Free text values must be quoted with double quotes. Note: all non-printing characters in such free text value strings (e.g. newlines, tabs, control characters, etc) must be explicitly represented by their C (UNIX) style backslash-escaped representation (e.g. newlines as '\\n', tabs as '\\t'). As in ACEDB, multiple values can follow a specific tag. The aim is to establish consistent use of particular tags, corresponding to an underlying implied ACEDB model if you want to think that way (but acedb is not required). Examples of these would be:\nseq1     BLASTX  similarity   101  235 87.1 + 0 Target \"HBA_HUMAN\" 11 55 ; E_value 0.0003\ndJ102G20 GD_mRNA coding_exon 7105 7201   .  - 2 Sequence \"dJ102G20.C1.1\"\n\n=&gt; Version 2 change: field and line size limitations are removed; however, fields (except the optional [attribute] field above) must still not include whitespace.\n=&gt; Version 2 note: previous Version 2 permission to use arbitrary whitespace as field delimiters is now revoked! (99/02/26)\n</code></pre> <p>Extra features of the format:</p> <pre><code>Comments\n\n[...]\nWe also permit extra information to be given on the line following the attribute field without a '#' character (Version 2 change: this extra information must be delimited by the '#' comment delimiter OR by another tab field delimiter character, following any and all [attribute] field tag-value pairs).\n[...]\n\nVersion 2 change: we gave in and defined a structured way of passing additional information, as described above under [attribute]. But the sentiment of this paragraph still applies - don't overuse the tag-value syntax. The use of tag-value pairs (with whitespace) renders problematic the parsing of Version 1 style comments (following the attribute field, without a '#' character), so in Version 2, such [attribute] trailing comments must either start with the \"#\" as noted above, or with at least one additional tab character. Moreover, '#' characters embedded within quoted text string values of [attribute] tag-values should not be parsed as the beginning of a comment.\n\n## comment lines for meta information\n\nThere is a set of standardised (i.e., parsable) ## line types that can be used optionally at the top of a gff file. The philosophy is a little like the special set of %% lines at the top of postscript files, used for example to give the BoundingBox for EPS files.\nCurrent proposed ## lines are:\n\n  ##gff-version 2\n    The current version is 2. (Version 2 change!)\n ##source-version {source} {version text}\n    /\n ##date {date}\n    /\n  ##Type &lt;type&gt; [&lt;name&gt;]\n    [New] The type of host sequence described by the features. Standard types are 'DNA', 'Protein' and 'RNA'. The optional &lt;name&gt; allows multiple ##Type definitions describing multiple GFF sets in one file, each which have a distinct type. If the name is not provided, then all the features in the file are of the given type. Thus, with this meta-comment, a single file could contain DNA, RNA and Protein features, for example, representing a single genomic locus or 'gene', alongside type-specific features of its transcribed mRNA and translated protein sequences. If no ##Type meta-comment is provided for a given GFF file, then the type is assumed to be DNA.\n\n ##DNA {seqname}\n ##acggctcggattggcgctggatgatagatcagacgac\n ##...\n ##end-DNA\n    /\n\n ##RNA &lt;seqname&gt;\n ##acggcucggauuggcgcuggaugauagaucagacgac\n ##...\n ##end-RNA\n    Similar to DNA. Creates an implicit ##Type RNA &lt;seqname&gt; directive.\n\n ##Protein &lt;seqname&gt;\n ##MVLSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSF\n ##...\n ##end-Protein\n    Similar to DNA. Creates an implicit ##Type Protein &lt;seqname&gt; directive.\n\n  ##sequence-region {seqname} {start} {end}\n    /\n</code></pre> <p>Here is an example of GFF2:  </p> <pre><code>##gff-version 2\nSEQ1    EMBL    atg 103 105 .   +   0\nSEQ1    netgene splice5 172 173 0.94    +   .\n# this is comment that will be skipped by the parser\nSEQ1    genie   sp5-10  168 177 2.1 +   .\nSEQ2    grail   ATG 17  19  2.1 -   0\nSEQ3    BLASTX    similarity    100 135 .   +   0   Target \"HBA_HUMAN\" ; E_value 0.0003 # this is also a comment that will be skipped by the parser\nSEQ3    BLASTX    similarity    235 260 .   +   2   Target \"HBA_HUMAN\" ; E_value 0.0005\nSEQ3    BLASTX    similarity    360 396 .   +   0   Target \"HBA_HUMAN\" ; E_value 0.001\n</code></pre>"},{"location":"bioinformatics/format/specification/gxf/#gff3","title":"GFF3","text":"<p>(2004)  </p> <p>GFF3 addresses several shortcomings in its predecessor, GFF2. Actually it addresses the most common extensions to GFF, while preserving backward compatibility with previous formats. It has been conceptualized by Lincoln Stein. The First specification draft I found is from 10 September 2003 (version 1.00rc1). The first offical specification is the version 1 published the 30 September 2004.</p> <p>Last updated the 26 February 2013 with version 1.23. Here is the last description of the specifications: https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md</p> <p>The majors updates are:   * the limitations of the feature type (3rd column) that is constrained to be either a term from the Sequence Ontology or an SO accession number (2278 possibilities).  * Some attribute's tags have predefined meanings: ID, Name, Alias, Parent, Target, Gap, Derives_from, Note, Dbxref, Ontology_term, Is_circular.   * Parent, Alias, Note, Dbxref and Ontology_term attributes can have multiple values (separated with the comma \",\" character).   * The ID indicates the ID of the feature. The ID attribute is required for features that have children (e.g. gene and mRNAs), or for those that span multiple lines, but are optional for other features. IDs for each feature must be unique within the scope of the GFF file. In the case of discontinuous features (i.e., a single feature that exists over multiple genomic locations) the same ID may appear on multiple lines. All lines that share an ID must collectively represent a single feature.   * The reserved Parent attribute can be used to establish a part-of relationship between two features. A feature that has the Parent attribute set is interpreted as asserting that it is a part of the specified Parent feature</p>"},{"location":"bioinformatics/format/specification/gxf/#gtf","title":"GTF","text":""},{"location":"bioinformatics/format/specification/gxf/#gtf1","title":"GTF1","text":"<p>(2000 - generally called GTF)</p> <p>GTF stands for Gene Transfer Format.</p> <p>GTF borrows from the GFF file format [1], but has additional structure that warrants a separate definition and format name. The structure is similar to GFF, so the fields are:  </p> <pre><code>&lt;seqname&gt;&lt;source&gt;&lt;feature&gt;&lt;start&gt;&lt;end&gt;&lt;score&gt;&lt;strand&gt;&lt;frame&gt;&lt;attributes&gt;\n</code></pre> <p>In this paper from 2003 (Keibler E, Brent M: Eval: a software package for analysis of genome annotations. BMC Bioinformatics 2003, 4:50.) they say:</p> <pre><code>Annotations are submitted to Eval in GTF file format http://genes.cse.wustl.edu/GTF2.html, \na community standard developed in the course of several collaborative genome annotations projects \n[Reese MG, Hartzell G, Harris NL, Ohler U, Abril JF, Lewis SE. Genome annotation assessment in \nDrosophila melanogaster. Genome Res. 2000;10:483\u2013501. doi: 10.1101/gr.10.4.483. | Mouse Genome\nSequencing Consortium Initial sequencing and comparative analysis of the mouse genome. Nature. \n2002;420:520\u2013562. doi: 10.1038/nature01262.].\nAs such it can be run on the output of any annotation system.\n</code></pre> <p>So the oldest paper they point to is the one from Reese et al. from February 9, 2000 (Genome annotation assessment in Drosophila melanogaster) that says:</p> <pre><code>We found that the General Feature Format (GFF) (formerly known as the Gene Feature Finding \nformat) was an excellent fit to our needs. The GFF format is an extension of a simple name, \nstart, end record that includes some additional information about the sequence being annotated: \nthe source of the feature; the type of feature; the location of the feature in the sequence; and\na score, strand, and frame for the feature. It has an optional ninth field that can be used to \ngroup multiple predictions into single annotations.\nMore information can be found at the GFF web site:  http://www.sanger.ac.uk/Software/formats/GFF/. \nOur evaluation tools used a GFF parser for the PERL programming language that is also available \nat the GFF web site. We found that it was necessary to specify a standard set of feature names \nwithin the GFF format, for instance, declaring that submitters should describe coding exons with \nthe feature name CDS.\n</code></pre> <p>From this, we can understand that in ~2000 for the drosophila genome project they have use the GFF format with particuliar specification that lead to the emergence of the GTF format.</p> <p>In another paper, The Human Genome Browser at UCSC. Genome Res. 2002 Jun; 12(6): 996\u20131006. doi:10.1101/gr.229102 the authors say that the GTF format has been designed specifically for the human genome project:</p> <pre><code>Since August 2001, it has become possible for users to upload their own annotations for display\nin the browser. These annotations can be in the standard GFF format \n(http://www.sanger.ac.uk/Software/formats/GFF), or in some formats designed specifically for the \nhuman genome project including GTF, PSL, and BED. The formats are described in detail in the web\npage http://genome.cse.ucsc.edu/goldenPath/help/customTrack.html. Note that the GFF and GTF files\nmust be tab delimited rather than space delimited.\n</code></pre> <p>With this last paper, it's hard to understand from which project the GTF format is finally born.</p> <p>Until now I havn't find a comprehensive description of the original GTF version (Ensembl version ?), but based on some hints from the Masters Project Report of Evan Keibler <code>Eval: A Gene Set Comparison System</code> and from other ressources I can say that the GTF1 was similar to GTF2. With few differences listed here:</p> <ul> <li> <p>feature  </p> <pre><code>The feature field can take 5 values: `CDS`, `start_codon`, `stop_codon`, `exon` and `intron`.\n</code></pre> </li> <li> <p>strand  </p> <pre><code>The strand value must be `+`, `-`, or `.`.\n</code></pre> </li> </ul>"},{"location":"bioinformatics/format/specification/gxf/#gtf2-and-gff25","title":"GTF2 and GFF2.5","text":"<p>(2003)  </p> <p>We can find in some places that GTF2 is similar to GFF2.5, but I do not know of a coherent explanation about it. It sounds definitely to be GTF format. The original GTF described by Ensembl has been adapted and became GTF2 for the need of the the Mouse/Human Annotation Collaboration.</p> <p>Here the description from the Brent Lab at the Washington University in St. Louis. Found from the Eval publication received the 18 July 2003 mentioning the address http://genes.cse.wustl.edu/GTF2.html that has been archived in the web-archive the 12/12/2003. Prior to the publication in BMC Bioinformatics (and after 1 January 2003 because it's the most recent  journal cited in his report) E. Kleiber released a Master project report named \"Eval: A Gene Set Comparison System\" where he mention and describe the GTF, maybe the first version of the GTF2 format.</p> <p>GTF borrows from the GFF file format [1], but has additional structure that warrants a separate definition and format name. The structure is similar to GFF, so the fields are:  </p> <pre><code>&lt;seqname&gt;&lt;source&gt;&lt;feature&gt;&lt;start&gt;&lt;end&gt;&lt;score&gt;&lt;strand&gt;&lt;frame&gt;&lt;attributes&gt;\n</code></pre> <p>Definition of these fields are:</p> <pre><code>&lt;seqname&gt;\n    The &lt;seqname&gt; field contains the name of the sequence which this gene is on.\n&lt;source&gt;\n    The &lt;source&gt; field should be a unique label indicating where the annotations came from \u2013 typically the name of either a prediction program or a public database.\n&lt;feature&gt;\n    The &lt;feature&gt; field can take 4 values: \"CDS\", \"start_codon\", \"stop_codon\" and \"exon\". The \u201cCDS\u201d feature represents the coding sequence starting with the first translated codon and proceeding to the last translated codon. Unlike Genbank annotation, the stop codon is not included in the \u201cCDS\u201d feature for the terminal exon. The \u201cexon\u201d feature is used to annotate all exons, including non-coding exons. The \u201cstart_codon\u201d and \u201cstop_codon\u201d features should have a total length of three for any transcript but may be split onto more than one line in the rare case where an intron falls inside the codon.\n&lt;start&gt;, &lt;end&gt;\n    Integer start and end coordinates of the feature relative to the beginning of the sequence named in &lt;seqname&gt;. &lt;start&gt; must be less than or equal to &lt;end&gt;. Sequence numbering starts at 1. Values of &lt;start&gt; and &lt;end&gt; must fall inside the sequence on which this feature resides.\n&lt;score&gt;\n    The &lt;score&gt; field is used to store some score for the feature. This can be any numerical value, or can be left out and replaced with a period.\n&lt;strand&gt;\n    '+' or '-'.\n&lt;frame&gt;\n   A value of 0 indicates that the first whole codon of the reading frame is located at 5'-most base. 1 means that there is one extra base before the first whole codon and 2 means that there are two extra bases before the first whole codon. Note that the frame is not the length of the CDS mod 3. If the strand is '-', then the first base of the region is value of &lt;end&gt;, because the corresponding coding region will run from &lt;end&gt; to &lt;start&gt; on the reverse strand.\n&lt;attributes&gt;\n    Each attribute in the &lt;attribute&gt; field should have the form: attribute_name \u201cattribute_value\u201d;\n    Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes.\n\n   All four features have the same two mandatory attributes at the end of the record:\n</code></pre> qualifier description gene_id A unique identifier for the genomic source of the transcript. Used to group transcripts into genes. transcript_id A unique identifier for the predicted transcript. Used to group features into transcripts. <pre><code>These attributes are designed for handling multiple transcripts from the same genomic region. Any other attributes or comments must appear after these two.\n\n[comments].\n    Any line may contain comments. Comments are indicated by the # character and everything following a # character on any line is a comment. As such, all fields are prohibited from containing # characters\n</code></pre> <p>Here an example of GTF:</p> <pre><code> Hs-Ch1  Twinscan    exon    150 200 .   +   .   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    exon    300 401 .   +   .   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    CDS 380 401 .   +   0   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    exon    501 650 .   +   .   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    CDS 501 650 .   +   2   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    exon    700 800 .   + .   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    CDS 700 707 .   +   2   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    exon    900 997 .   + .   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    start_codon 380 382 .   +   0   gene_id \"1\"; transcript_id \"1.a\";\n Hs-Ch1  Twinscan    stop_codon  708 710 .   +   0   gene_id \"1\"; transcript_id \"1.a\";\n</code></pre>"},{"location":"bioinformatics/format/specification/gxf/#gtf21","title":"GTF2.1","text":"<p>(2005)  </p> <p>Here the description from the Brent Lab at the Washington University in St. Louis. In this version, the feature field change a little bit and can contain 6 different types:</p> <pre><code>The following feature types are required: \"CDS\", \"start_codon\", \"stop_codon\".  \nThe features \"5UTR\", \"3UTR\", and \"exon\" are optional. All other features will be ignored.\n</code></pre>"},{"location":"bioinformatics/format/specification/gxf/#gtf22","title":"GTF2.2","text":"<p>(2007)  </p> <p>In this version, they included specific 9th column terms: transcript_id, protein_id and gene_id. Here the description from the Brent Lab at the Washington University in St. Louis. The  field change a little bit and can contain 9 different types: <pre><code>The following feature types are required: \"CDS\", \"start_codon\", \"stop_codon\".  \nThe features \"5UTR\", \"3UTR\", \"inter\", \"inter_CNS\", \"intron_CNS\" and \"exon\" are optional.\n</code></pre> <p><code>inter</code> and <code>inter_CNS</code> should have an empty transcript_id and gene_id attribute: gene_id \"\"; transcript_id \"\";</p>"},{"location":"bioinformatics/format/specification/gxf/#gtf25","title":"GTF2.5","text":"<p>(2012)  </p> <p>This version is unofficial. I call it like that to differentiate it against the other GTF flavors. This GTF flavor has been developed by the GENCODE project. Here is the first desciption of this format and the last desciption of this format. The  field changed a little bit and can contain 8 different types: gene, transcript, exon, CDS, UTR, start_codon, stop_codon, Selenocysteine. <p>The tags/key-name of the  field started with 9 mandatories and 34 optionals (30 from Havanna project and 4 specific to Genecode). The most recent description of the format shows that it has existed until 11 different mandatory tags, but depending of the version and the line (feature type) the number of mandatory tags has varied a lot. There are also 76 that are optionals (70 comes from of a special set of tags, and 6 are specifics). For GRCh38 annotation lifted back to GRCh3, there are 6 other optional tags."},{"location":"bioinformatics/format/specification/gxf/#gtf3","title":"GTF3","text":"<p>(2015)  </p> <p>This version is unofficial. I call it like that to differentiate it against the other GTF flavors. Originally Ensembl has created the GTF format that has been then slightly modified into GTF2 and then broadly used. Ensembl has adopted GTF2 and used only 4 different type of feature (CDS, exon, start_codon, stop_codon) and a lot of specific attributes. Then they adopted from release 75 the GTF 2.5. More features types are used: gene, transcript, exon, CDS, Selenocysteine, start_codon, stop_codon, and UTR. Then from release 82 they move on in the format I call GTF3 where they replaced UTR by three_prime_utr and five_prime_utr.</p>"},{"location":"bioinformatics/format/specification/gxf/#resume","title":"Resume","text":""},{"location":"bioinformatics/format/specification/gxf/#timeline-of-the-different-formats","title":"Timeline of the different formats","text":""},{"location":"bioinformatics/format/specification/gxf/#main-points-and-differences-between-gff-formats","title":"Main points and differences between GFF formats","text":"format version year col1 - seqname col2 - source col3 - feature col4 - start col5 - end col6 - score col7 - strand col8 - frame col9 - attribute Comment GFF1 1997 can be anything integer integer numerical value or 0 '+', '-' or '.' '0', '1', '2' or '.' This field is originaly called group. An optional string-valued field that can be used as a name to group together a set of records. Each String had to be under 256 characters + whole line under 32 000 characters long GFF2 2000 can be anything integer integer numerical value or  '.' '+', '-' or '.' '0', '1', '2' or '.' This optional must have an tag value structure following the syntax used within objects in a .ace file, flattened onto one line by semicolon separators. Tags must be standard identifiers ([A-Za-z][A-Za-z0-9_]). Free text values must be quoted with double quotes. Note: all non-printing characters in such free text value strings (e.g. newlines, tabs, control characters, etc) must be explicitly represented by their C (UNIX) style backslash-escaped representation (e.g. newlines as '\\n', tabs as '\\t'). As in ACEDB, multiple values can follow a specific tag. form: Target \"HBA_HUMAN\" 11 55 ; E_value 0.0003* The START and STOP codons are included in the CDS GFF3 2004 [a-zA-Z0-9.:^*$@!+_?-|] Column name changed by . This is constrained to be either a term from the Sequence Ontology or an SO accession number. integer integer numerical value or  '.' '+', '-', '.' or '?' Column name changed by  '0', '1', '2' or '.' Multiple tag=value pairs are separated by semicolons. URL escaping rules are used for tags or values containing the following characters: \",=;\". Spaces are allowed in this field, but tabs must be replaced with the %09 URL escape. Attribute values do not need to be and should not be quoted. The quotes should be included as part of the value by parsers and not stripped. form: ID=cds00004;Parent=mRNA00001,mRNA00002;Name=edenprotein.4. Some tags have predefined meaning, they start by capital letter.  The ID attributes are only mandatory for those features that have children (the gene and mRNAs), or for those that span multiple lines. Consequently features having parents must have the Parent attribute. The START and STOP codons are included in the CDS"},{"location":"bioinformatics/format/specification/gxf/#main-points-and-differences-between-gtf-formats","title":"Main points and differences between GTF formats","text":"format version year col1 - seqname col2 - source col3 - feature col4 - start col5 - end col6 - score col7 - strand col8 - frame col9 - attribute Comment GTF1 2000 CDS, start_codon, stop_codon, exon, intron integer integer numerical value or  '.' '+', '-' or '.' '0', '1', '2' or '.' porbably similar to GTF2 probably similar to GTF2 GTF2 / GFF2.5 2003 CDS, start_codon, stop_codon, exon integer integer numerical value or  '.' '+' or '-' '0', '1', '2' or '.' Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes. form: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d; Two mandatory attributes: gene_id, transcript_id. Any other attributes or comments must appear after these two and will be ignored. Textual attributes should be surrounded by doublequotes. Unlike Genbank annotation, the stop codon is not included in the CDS for the terminal exon GTF2.1 2005 CDS, start_codon, stop_codon, exon, 5UTR, 3UTR integer integer numerical value or  '.' '+' or '-' '0', '1', '2' or '.' Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes. form: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d; Two mandatory attributes: gene_id, transcript_id. Any other attributes or comments must appear after these two and will be ignored. Textual attributes should be surrounded by doublequotes. Unlike Genbank annotation, the stop codon is not included in the CDS for the terminal exon GTF2.2 2007 CDS, start_codon, stop_codon, 5UTR, 3UTR, inter, inter_CNS, intron_CNS and exon integer integer numerical value or  '.' '+' or '-' '0', '1', '2' or '.' Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes. form: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d; Two mandatory attributes: gene_id, transcript_id. Any other attributes or comments must appear after these two and will be ignored. Textual attributes should be surrounded by doublequotes. Unlike Genbank annotation, the stop codon is not included in the CDS for the terminal exon GTF2.5 2012 gene, transcript, exon, CDS, UTR, start_codon, stop_codon, Selenocysteine integer integer numerical value or  '.' '+' or '-' '0', '1', '2' or '.' Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes. form: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d; ~9 mandatory tags but this number varies depending of the version and the type of feature. Number of optional tag varies between 34 and 82 depending of the version. Textual attributes should be surrounded by doublequotes. Unlike Genbank annotation, the stop codon is not included in the CDS for the terminal exon GTF3 2015 gene, transcript, exon, CDS, Selenocysteine, start_codon, stop_codon, three_prime_utr and five_prime_utr integer integer numerical value or  '.' '+' or '-' '0', '1', '2' or '.' Attributes must end in a semicolon which must then be separated from the start of any subsequent attribute by exactly one space character (NOT a tab character). Attributes\u2019 values should be surrounded by double quotes. form: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d; Two mandatory attributes: gene_id, transcript_id. Any other attributes or comments must appear after these two and will be ignored. Textual attributes should be surrounded by doublequotes. Unlike Genbank annotation, the stop codon is not included in the CDS for the terminal exon"},{"location":"bioinformatics/format/specification/gxf/#discussion","title":"Discussion","text":"<p>The main differences between GTF and GFF formats are the 3rd and 9th colomn. The feature type value of the 3rd column in GTF is constrained by a list of few feature types (&lt;10) while in GFF it is much more vast. It was not constrained until version 3 where it is now constrained to be either a term from the Sequence Ontology or an SO accession number ( 2278 possible terms ).  </p> <p>The structure of the 9th column is slightly different between the two formats:   * GTF2.2: attribute_name \u201cattribute_value\u201d; attribute_name \u201cattribute_value\u201d;   * GFF3: ID=cds00004;Parent=mRNA00001,mRNA00002;Name=edenprotein.4 </p> <p>Within that column, the mandatory attributes are different.</p> <p>Feature type limitation wihtin GTF </p> <p>As the feature types of the 3rd column is limited by the GTF format, many groups/infrastructure use the 9th column to describe other features like tRNA, pseudogenes, etc. As an example, ENSEMBL use the attribute gene_biotype to define if a transcript feature is coding or non-coding.</p>"},{"location":"bioinformatics/format/specification/gxf/#extra","title":"Extra","text":""},{"location":"bioinformatics/format/specification/gxf/#problems-encountered-due-to-lack-of-standardization","title":"Problems encountered due to lack of standardization","text":"<p>Inconsistency in stop codon treatment in GTF tracks (from https://genome.ucsc.edu/FAQ/FAQtracks.html):  </p> <p>I've been doing some comparative gene set analysis using the gene annotation tracks and I believe I have run into an inconsistency in the way that stop codons are treated in the annotations. Looking at the Human June 2002 assembly, the annotations for Ensembl, Twinscan, SGP, and Geneid appear to exclude the stop codon in the coding region coordinates. All of the other gene annotation sets include the stop codon as part of the coding region. My guess is that this inconsistency is the result of the gene sets being imported from different file formats. The GTF2 format does not include the stop codon in the terminal exon, while the GenBank format does, and the GFF format does not specify what to do.</p> <p>Answer:  </p> <p>Your guess is correct. We haven't gotten around to fixing this situation. A while ago, the Twinscan group made a GTF validator. It interpreted the stop codon as not part of the coding region. Prior to that, all GFF and GTF annotations that we received did include the stop codon as part of the coding region; therefore, we didn't have special code in our database to enforce it. In response to the validator, Ensembl, SGP and Geneid switched their handling of stop codons to the way that Twinscan does it, hence the discrepancy.</p> <p>Inconsistency in GTF format (reported by Evan Keibler in his Masters Project Report):  </p> <p>Although the GTF file format is a fairly simple and well defined format, data is often claimed to be in GTF format when it does not comply completely with the specification. Most data is generated in some proprietary format specific to the particular program or lab which produced it. These proprietary formats often differ in small subtle ways, such as the sequence being indexed starting at position 0 or 1, or the start/stop codon being inside or outside of the initial/terminal exon. If the data is to be effectively shared with others it must be in a standard, well defined format. Though many labs do convert their data to GTF format, the files they generate rarely comply completely with the specification. For this reason the GTF validator was created. The validator allows the user to verify that the data is in correct GTF format before sharing with others. This makes communication more efficient because the receiver does not have to locate and fix the subtle differences between the many file formats.</p>"},{"location":"bioinformatics/format/specification/gxf/#ensembl-gtf-formats","title":"Ensembl GTF formats","text":""},{"location":"bioinformatics/format/specification/gxf/#evolution-of-the-3rd-and-9th-column","title":"Evolution of the 3rd and 9th column","text":"<p>Here the example of the human annotation: </p> annotation file ensembl version nb feature type (3rd column) nb attribute tag (9th column) Homo_sapiens.NCBI36.43.gtf 43 4: CDSexonstart_codonstop_codon 6: exon_numbergene_idgene_nameprotein_idtranscript_idtranscript_name Homo_sapiens.GRCh37.74.gtf 74 4: CDSexonstart_codonstop_codon 8: exon_idexon_numbergene_biotypegene_idgene_nameprotein_idtranscript_idtranscript_name Homo_sapiens.GRCh37.75.gtf 75 8: CDSSelenocysteineUTRexongenestart_codonstop_codontranscript 12: ccds_idexon_idexon_numbergene_biotypegene_idgene_namegene_sourceprotein_idtag<sup>*</sup>transcript_idtranscript_nametranscript_source Homo_sapiens.GRCh37.81.gtf 81 8: CDSSelenocysteineUTRexongenestart_codonstop_codontranscript 22: ccds_idexon_idexon_numberexon_versiongene_biotypegene_idgene_namegene_sourcegene_versionhavana_genehavana_gene_versionhavana_transcripthavana_transcript_versionprotein_idprotein_versiontag<sup>*</sup>transcript_biotypetranscript_idtranscript_nametranscript_sourcetranscript_support_leveltranscript_version Homo_sapiens.GRCh37.82.gtf 82 9: CDSSelenocysteineexonfive_prime_utrgenestart_codonstop_codonthree_prime_utrtranscript 22: same as before Homo_sapiens.GRCh38.95.gtf 95 9: CDSSelenocysteineexonfive_prime_utrgenestart_codonstop_codonthree_prime_utrtranscript 18: ccds_idexon_idexon_numberexon_versiongene_biotypegene_idgene_namegene_sourcegene_versionprotein_idprotein_versiontag<sup>*</sup>transcript_biotypetranscript_idtranscript_nametranscript_sourcetranscript_support_leveltranscript_version <sup>*</sup>Tags are additional flags used to indicate attibutes of the transcript."},{"location":"bioinformatics/format/specification/gxf/#difference-between-gencode-and-ensembl-gtf","title":"Difference between GENCODE and Ensembl GTF","text":"<p>From here.  </p> <p>The gene annotation is the same in both files. The only exception is that the genes which are common to the human chromosome X and Y PAR regions can be found twice in the GENCODE GTF, while they are shown only for chromosome X in the Ensembl file.</p> <p>In addition, the GENCODE GTF contains a number of attributes not present in the Ensembl GTF, including annotation remarks, APPRIS tags and other tags highlighting transcripts experimentally validated by the GENCODE project or 3-way-consensus pseudogenes (predicted by Havana, Yale and UCSC). See our complete list of tags for more information.</p> <p>Please note that the Ensembl GTF covers the annotation in all sequence regions whereas GENCODE produces a similar file but also a GTF file with the annotation on the reference chromosomes only.</p>"},{"location":"bioinformatics/format/specification/interesting_ressources/","title":"Interesting ressources about formats","text":"<p>External ressource describing many different formats</p> <ul> <li>UCONN - University of Connecticut</li> <li>lastz README</li> <li>UCSC - University of California, Santa Cruz</li> </ul>"},{"location":"bioinformatics/format/specification/markdown/","title":"Markdown","text":""},{"location":"bioinformatics/format/specification/markdown/#git-markdown","title":"Git markdown","text":""},{"location":"bioinformatics/format/specification/markdown/#mastering-git-markdown","title":"Mastering git markdown","text":"<p>Mastering Git Markdown</p>"},{"location":"bioinformatics/format/specification/markdown/#anchors","title":"Anchors","text":"<p>Here is what the code that creates the anchors do:</p> <p>It downcases the string remove anything that is not a letter, number, space or hyphen (see the source for how Unicode is handled) changes any space to a hyphen. If that is not unique, add \"-1\", \"-2\", \"-3\",... to make it unique</p> <p>Based on that information you should know how should look your anchor to be recognized.</p>"},{"location":"bioinformatics/format/specification/sugar/","title":"The SUGAR format","text":"<p>Sugar is Simple UnGapped Alignment Report, which displays ungapped alignments one-per-line.  The sugar line starts with the string \"sugar:\" for easy extraction from the output, and is followed by the following 9 fields in the order below:</p> <ol> <li>query identifier  </li> <li>query start position  </li> <li>query stop position  </li> <li>query strand  </li> <li>target identifier  </li> <li>target start position  </li> <li>target stop position  </li> <li>target strand  </li> <li>score  </li> </ol> <p>Here an example of SUGAR format:  </p> <p>sugar: hs989235.cds 5 468 + hsnfg9.embl 25689 27450 + 1916</p> <p>This format is used by Exonerate and seems to have been originaly developed for this tool. The format is related to the CIGAR format which add an extra (10th) field to describe Gaped alignment.</p>"},{"location":"bioinformatics/format/specification/textile/","title":"TEXTILE (Wiki)","text":"<p>Textile is a lightweight markup language that uses a text formatting syntax to convert plain text into structured HTML markup. Textile is used for writing articles, forum posts, readme documentation, and any other type of written content published online. Textile is one of several lightweight markup languages to have influenced the development of Markdown.  </p> <p>Here specifications of the format </p> <p>Is is used by Redmine</p>"},{"location":"bioinformatics/format/specification/vcf/","title":"VCF v4.4","text":""},{"location":"bioinformatics/format/specification/vulgar/","title":"The VULGAR format","text":"<p>Vulgar is Verbose Useful Labelled Gapped Alignment Report, This format also starts with the same 9 fields  as SUGAR output, and is followed by a series of  triplets.  The label may be one of the following:   Operator Description M Match C Codon G Gap N Non-equivalenced region 5 5' splice site 3 3' splice site I Intron S Split codon F Frameshift <p>The format seems to have been originally develloped for the Exonerate tool. The F seems to have been used for the definition of the GFF3 gap attribute that use the CIGAR string as reference.</p>"},{"location":"cluster/rackham/","title":"Rackham","text":"<p>Rackham is a high performance computer cluster at UPPMAX (Uppsala Multidisciplinary Center for Advanced Computational Science). UPPMAX is Uppsala University's resource of high-performance computers, large-scale storage and know-how of high-performance computing (HPC).</p> <ul> <li>UPPMAX github repo</li> <li>UPPMAX official Cheat Sheet</li> <li>Rackham User Guide</li> </ul>"},{"location":"cluster/rackham/#uppmax-modules","title":"UPPMAX modules","text":"Command Comment module avail List available modules module load modulename Load the module modulename module unload modulename Load the module modulename module list List all modules loaded module spider searchword Search all module containing searchword"},{"location":"cluster/rackham/#running-jobs-with-the-slurm-ressource-manager","title":"Running jobs with the Slurm ressource manager","text":"Command Comment interactive -A projectID Start interactive job using 1 core for 1 hour interactive -A projectID -t 8:00:0 -p core -n 2 Start interactive job using 2 cores for 8 hours sbatch -A projectID -t d-hh:mm:ss -n cores -p partition my_jobscript_file Start batch job sbatch -A projectID -t 7-00:00:00 -p node my_jobscript_file Running for 7 days on all 20 cores one one node sbatch -A projectID -t 48:00:00 -p core -n 4 my_jobscript_file Running for 2 days on only 4 cores on a node scancel jobId Cancel a single job scancel -i -u user Interactively cancel all jobs for user"},{"location":"cluster/rackham/#showing-user-job-and-project-info","title":"Showing user, job and project info","text":"Command Comment Full documentation jobinfo Show all running and waiting jobs in the queue jobinfo jobinfo -u user Show jobs for specific user jobinfo jobstats -p -A projectID generate plots for resource usage for recent jobs in a project jobstats uquota Show disk usage\u00a0of projects you are a member of projinfo Show used core hours of projects you are a member of finishedjobinfo Telling you about finished jobs on Rackham projmembers List members of a project projsummary  projectID Summarizes some useful information about projects squeue -u user Information about user's jobs <p>/!\\ Most of the commands use the cluster you are logged into as default cluster, if you wish to apply the command to another cluster you have to specify is using: -M clusterName </p> <p>/!\\ Most of the commands have plenty of parameters and have an help. So don't forget to check it using: command --help</p>"},{"location":"cluster/scheduler_rosetta/","title":"Lecture 2015","text":""},{"location":"cluster/screen/","title":"Screen Cheat Sheet","text":"<p>From http://aperiodic.net/screen/quick_reference</p>"},{"location":"cluster/screen/#getting-in","title":"Getting in","text":"Command Description screen -S \\&lt;name&gt; start a new screen session with session \\&lt;name&gt; screen -ls list running sessions/screens screen -x attach to a running session screen -r  attach to session \\&lt;name&gt; screen -dRR the \u201cultimate attach\u201d: Attaches to a screen session. If the session is attached elsewhere, detaches that other display. If no session exists, creates one. If multiple sessions exist, uses the first one."},{"location":"cluster/screen/#getting-out","title":"Getting out","text":"Command Description Ctrl-a d detach Ctrl-a D D detach and logout (quick exit) Ctrl-a \\ exit screen, Exit all of the programs in screen. Ctrl-a Ctrl-\\ force-exit screen exit getting out of the screen session"},{"location":"cluster/screen/#window-management","title":"Window Management","text":"Command Description Ctrl-a c create new window Ctrl-a Ctrl-a change to last-visited active window Ctrl-a \\&lt;number&gt; change to window by number Ctrl-a ' \\&lt;number or title&gt; change to window by number or name Ctrl-a n change to next window in list Ctrl-a \\&lt;space&gt; rchange to next window in list Ctrl-a p change to previous window in list Ctrl-a \\&lt;backspace&gt; change to previous window in list Ctrl-a \" see window list Ctrl-a w show window bar Ctrl-a k kill current window Ctrl-a \\ kill all windows Ctrl-a A rename current window Close all applications in the current window (including shell) close current window"},{"location":"cluster/screen/#split-screen","title":"Split screen","text":"Command Description Ctrl-a S split display horizontally Ctrl-a | split display vertically Ctrl-a V split display vertically Ctrl-a tab jump to next display region Ctrl-a X remove current region Ctrl-a Q remove all regions but the current one"},{"location":"cluster/screen/#clipboard-and-navigation","title":"Clipboard and Navigation","text":"Command Description Ctrl-a [ freely navigate buffer Ctrl-a \\ freely navigate buffer space toggle selection to copy Ctrl-a ] paste <p>See also here</p>"},{"location":"cluster/screen/#help","title":"Help","text":"Command Description Ctrl-a ? See help (lists keybindings)"},{"location":"cluster/screen/#escape-key","title":"Escape key","text":"<p>All screen commands are prefixed by an escape key, by default C-a (that's Control-a, sometimes written ^a). To send a literal C-a to the programs in screen, use C-a a. This is useful when working with screen within screen. For example C-a a n will move screen to a new window on the screen within screen.</p>"},{"location":"cluster/screen/#misc","title":"Misc","text":"Command Description Ctrl-a Ctrl-l redraw window Ctrl-a M monitor window for activity Ctrl-a _ monitor window for silence Ctrl-a Ctrl-v enter digraph (for producing non-ASCII characters) Ctrl-a x lock session (password protect) Ctrl-a : enter screen command Ctrl-a H enable logging in the screen session"},{"location":"cluster/screen/#scrollback-buffer","title":"Scrollback-buffer","text":"<p>In copy mode, one can navigate the scrollback buffer in various ways:</p> Command Description Ctrl-u half page up Ctrl-d half page down Ctrl-b back Ctrl-f forward h cursor left j cursor down k cursor up l cursor right"},{"location":"cluster/screen/#scripting","title":"Scripting","text":"Command Description screen -S  -X  send a command to a named session screen -S  -X screen ping example.com create a new window and run ping example.com screen -S  [-p ] -X stuff $'quit\\r' stuff characters into the input buffer using bash to expand a newline character <p>An example:</p> <pre><code># run bash within screen\nscreen -AmdS bash_shell bash\n# run top within that bash session\nscreen -S bash_shell -p 0 -X stuff $'top\\r'\n\n# ... some time later\n\n# stuff 'q' to tell top to quit\nscreen -S bash_shell -X stuff 'q'\n# stuff 'exit\\n' to exit bash session\nscreen -S bash_shell -X stuff $'ex\n</code></pre>"},{"location":"cluster/screen/#screenrc","title":"Screenrc","text":"<p>https://gist.github.com/mosquito/d109e44a2c6884c34f9c</p>"},{"location":"cluster/slurm/","title":"Table of Contents","text":"<ul> <li>Definitions</li> <li>job</li> <li>task</li> <li>Cluster status</li> <li>Running jobs</li> <li>Use case without MPI</li> <li>Use case with MPI</li> <li>Authors</li> </ul>"},{"location":"cluster/slurm/#definitions","title":"Definitions","text":""},{"location":"cluster/slurm/#job","title":"job","text":"<p>Typically what is interesting for a user, will have a corresponding resource allocation and things like an executable, working directory, <code>stdout</code> and <code>stderr</code> files and so on.</p> <p>A job may span resources on several nodes. Typically, you submit a job with <code>sbatch</code> or <code>salloc</code>, but it will also be implicitly submitted if you use <code>srun</code>.</p>"},{"location":"cluster/slurm/#task","title":"task","text":"<p>One part of a job that has a corresponding sub-allocation, executable, working directory, <code>stdout</code>, <code>stderr</code> and so on (most typically inherited from the job).</p> <p>A task can span at most one node.</p> <p>To launch tasks from within a job, you can use <code>srun</code>, <code>mpirun</code> will also set up tasks within a job allocation.</p> <p>The <code>-c</code> flag to <code>sbatch</code> et al informs slurm how many cores each tasks requires (not the total number of cores, but cores-per-task).</p> <p>The <code>-n</code> flag informs slurm how many tasks are required.</p> <p>Actual allocated resources will be the values passed with <code>-n</code> and <code>-c</code> multiplication, so <code>-n 4 -c 6</code> will reserve 24 cores.</p>"},{"location":"cluster/slurm/#cluster-status","title":"Cluster status","text":"<p>These commands give you information on cluster status and nodes.</p> <pre><code>sinfo --Node --long\n</code></pre> <p>If you want to include the state of use of the cpu do </p> <pre><code>sinfo -o \"%n %.6D %.9P %.8t %.15C %.5a %.10l %.8h %.10g %.11T\"\n</code></pre>"},{"location":"cluster/slurm/#running-jobs","title":"Running jobs","text":"<pre><code>-N =&gt; number of nodes  \n-n =&gt; number of tasks  \n-c =&gt; number of threads\n</code></pre> <p>Jobs are generally recommended to be run on cores rather than blocking a whole node with a process that only uses 4 cores.  It means you should not ask for a certain number of nodes (with <code>-N</code>), but only use <code>-n</code> to specify cores. And if you want more cores per task also use <code>-c</code>.</p> <p>Note that there is a difference between submitting a job with <code>sbatch</code>  (which will launch a single process no matter what the number of requested tasks is) and with <code>srun</code> (which will launch the requested number of tasks). For those used to the recommended workflow from UPPMAX, one would submit the job with <code>sbatch</code> or possibly <code>salloc</code> and then use <code>mpirun</code> or <code>srun</code> if one wanted to launch tasks).</p> <p>Running a job on multiple CPU</p> <pre><code>srun -J jobName -n CPUs &lt;command&gt;\n</code></pre> <p>If the cluster has two type of nodes, e.g. 16 and 36 CPUs nodes. When asking for 36 CPU for a single job you must use the following syntax otherwise the job may be sent to a 16 CPU node:  </p> <pre><code>srun -J jobName [-N 1] -n 1 -c 36 &lt;command&gt;\n</code></pre> <p><code>-N</code> is optional because <code>-c 36</code> means you need 36 cores in one node, since threads cannot span across nodes. But it doesn't hurt to be explicit and specify all three parameters.</p> <p>It's possible <code>-n 1 -c 36</code> might worked better than using <code>-n 36</code>, but in some cases there have been bugs so in practice the other way works better. </p>"},{"location":"cluster/slurm/#use-case-without-mpi","title":"Use case without MPI","text":"N n c Description 1 36 One task running on 36 threads on one node 36 One job with 36 tasks, launches 1 process with <code>sbatch</code>, 36 with <code>srun</code>, can be spread on multiple nodes 1 Use one node at maximum 1 36 One job on one node with 36 tasks allocating 36 cores, will launch 1 process with <code>sbatch</code>, 36 with <code>srun</code> 1 36 One job on one node with 36 cores 36 One job with 36 cores"},{"location":"cluster/slurm/#use-case-with-mpi","title":"Use case with MPI","text":"N n c Description 1 36 One task running on 36 cores, will be allocated on the same node - mpi? 36 36 tasks (each with 1 core), may be spread over multiple nodes 1 Max one node 1 36 One job with 36 tasks, use at most one node 1 36 One job with one task with 36 cores (mpi?) 36 One job with one task with 36 cores (will be allocated from the same node, mpi?)"},{"location":"cluster/slurm/#authors","title":"Authors","text":"<p>Jacques Dainat, Roy Francis, Pontus Freyhult</p>"},{"location":"programming/bash/bash_cheat_sheet/","title":"level 1 - Basic commands","text":""},{"location":"programming/bash/bash_cheat_sheet/#level-2-advanced-commands","title":"level 2 - Advanced commands","text":""},{"location":"programming/bash/bash_cheat_sheet/#level-3-programming","title":"level 3 - Programming","text":""},{"location":"programming/bash/bash_lecture/","title":"Lecture 2015","text":""},{"location":"programming/bash/bash_other/","title":"bash useful commands","text":"command comment <code>ps aux \\| sort -nk 3</code> Keep track of the most CPU large task <code>ps aux \\| sort -nk 4</code> Keep track of the most MEM large task <code>du -shL</code> total size of a folder.<code>s</code> for summarize, <code>h</code> for human readable and <code>L</code>to dereference symbolic links"},{"location":"programming/bioconda/bioconda/","title":"Bioconda","text":""},{"location":"programming/bioconda/bioconda/#commands","title":"Commands","text":"<p>I never succeded to make the bioconda suggested command work: <code>bioconda-utils build --git-range master</code></p> <p>I use instead: <code>bioconda-utils build recipes/ config.yml  --packages agat</code></p> <p>I never succeded to make the bioconda suggested command work: <code>bioconda-utils build --docker --mulled-test --git-range master</code></p> <p>I use instead: <code>bioconda-utils build --docker --mulled-test --package agat</code></p>"},{"location":"programming/bioconda/bioconda/#errors","title":"Errors","text":"<p>I got the following error: <code>conda.exceptions.InvalidVersionSpec: Invalid version '&gt;=5.8': invalid character(s)</code></p> <p>I succeeded to pass over using: <code>conda upgrade -n base conda</code></p>"},{"location":"programming/git/git/","title":"The GIT version-control system","text":"<p>Most of the documention find here is inspired or copied from the excellent ressources provided by the CodeRefinery project (Here an example of such workshop in Uppsala december 2018). CodeRefinery is a project within the Nordic e-Infrastructure Collaboration (NeIC). NeIC is an organisational unit under NordForsk.</p>"},{"location":"programming/git/git/#basics","title":"Basics","text":"Command Comment git init initialize new repository git add add files or stage file(s) git commit commit staged file(s) git status see what is going on git log see history git log --oneline to get a better log of your commits history git diff show unstaged/uncommitted modifications git show show the change for a specific commit git mv move tracked files git rm remove tracked files"},{"location":"programming/git/git/#undoing-things","title":"Undoing things","text":"Command Comment git revert f960dd3 This creates a new commit that does the opposite of the reverted commit. The old commit remains in the history git commit --amend Amend to the last commit. This can also be used to modify the last commit message. Note that this will change the commit hash. This command modifies the history. This means that we never use this command on commits that we have shared with others. git checkout \\&lt;filename&gt; Undo unstaged/uncommitted changes."},{"location":"programming/git/git/#the-staging-area","title":"The staging area","text":"<p>The staging area helps us to create well-defined commits.</p> <p></p> Command Comment git diff show unstaged/uncommitted modifications git diff --staged see staged changes git reset unstages staged changes git checkout \\&lt;path&gt; check out the latest staged version ( or committed version if file has not been staged ) git add -u stage all modification"},{"location":"programming/git/git/#aliases","title":"Aliases","text":"Command Comment git config --global alias.graph \"log --all --graph --decorate --oneline\" the command \"log --all --graph --decorate --oneline\" can now be called using git graph"},{"location":"programming/git/git/#branching-and-merging","title":"Branching and merging","text":"Command Comment git branch see where we are git branch \\&lt;name&gt; create branch \\&lt;name&gt; git checkout \\&lt;name&gt; switch to branch \\&lt;name&gt; git merge \\&lt;name&gt; merge branch \\&lt;name&gt; (to current branch) git branch -d \\&lt;name&gt; delete branch \\&lt;name&gt; git branch -D \\&lt;name&gt; delete unmerged branch git checkout -b \\&lt;name&gt; create branch \\&lt;name&gt; and switch to it git reset --hard \\&lt;branch/hash&gt; rewind current branch to \\&lt;branch/hash&gt; and throw away all later code changes git reset --soft \\&lt;branch/hash&gt; rewind current branch to \\&lt;branch/hash&gt; but keep all later code changes and stage them git rebase \\&lt;branch/hash&gt; cut current branch off and transplant it on top of \\&lt;branch/hash&gt; git reflog show me a log of past hashes I have visited git checkout -b \\&lt;branch/hash&gt; create a branch pointing to &lt;bran <ul> <li>Typical workflows</li> </ul> <p>With this there are two typical workflows:</p> <pre><code>    $ git checkout -b new-feature  # create branch, switch to it\n    $ git commit                   # work, work, work, ...\n                       # test\n                       # feature is ready\n    $ git checkout master          # switch to master\n    $ git merge new-feature        # merge work to master\n    $ git branch -d new-feature    # remove branch\n</code></pre> <p>Sometimes you have a wild idea which does not work. Or you want some throw-away branch for debugging:</p> <pre><code>    $ git checkout -b wild-idea\n                       # work, work, work, ...\n                       # realize it was a bad idea\n    $ git checkout master\n    $ git branch -D wild-idea      # it is gone, off to a new idea\n                       # -D because we never merged back\n</code></pre> <p>No problem: we worked on a branch, branch is deleted, master is clean.</p> <p>Rebase vs. merge Git rebase and commit squashing</p>"},{"location":"programming/git/git/#tagging","title":"Tagging","text":"Command Comment \u00a0git tag -a v1.0 -m \"message\" To record particular states or milestones of a project at a given point in time, like for instance versions. \u00a0git push origin \\&lt;tagname&gt; To push a tag to remote servers. \u00a0git push --delete origin \\&lt;tagname&gt; To delete the remote tag. \u00a0git tag --delete \\&lt;tagname&gt; To delete the local tag."},{"location":"programming/git/git/#conflict-resolution","title":"Conflict resolution","text":"<p>See the link for manual resolution.</p> Command Comment git merge -s recursive -Xours branch-name merge and in doubt take the changes from current branch git merge -s recursive -Xtheirs branch-name merge and in doubt take the changes from less-avocados branch git merge --abort Abort a conflicting merge"},{"location":"programming/git/git/#interrupted-work","title":"Interrupted work","text":"<p>You are in a middle of a development and a colleague wants to fix/commit something right now. How to do ?   * Stashing   The stash is the first and easiest place to temporarily \u201cstash\u201d things. The stashes form a stack, so you can stash several batches of modifications.</p> Command Comment git stash will put working directory and staging area changes away. Your code will be same as last commit. git stash pop will return to the state you were before. Can give it a list. git stash list will list the current stashes. \u00a0git stash save NAME is like the first, but will give it a name. Useful if it might last a while. git stash save [-p] [filename] will stash certain files files and/or by patches. git stash drop will drop the most recent stash (or whichever stash you give). git stash apply reapply the work from the most recent stash git stash apply stash@{2} reapply the work from a specific stash <ul> <li>Create branches<pre><code>git checkout -b temporary  # create a branch and switch to it\ngit add &lt;paths&gt;            # stage changes\ngit commit                 # commit them\ngit checkout master        # back to master\n                 # do your work...\ngit checkout temporary     # continue where you left off\n</code></pre> </li> </ul>"},{"location":"programming/git/git/#working-with-remotes","title":"Working with remotes","text":"Command Comment git clone https://host.com/user/project.git project cloning a repository git push origin master push the change to the upstream repository git pull origin master Pull updates from the upstream repository (It is equivalent to <code>git fetch origin</code> + <code>git merge origin/master</code>) git pull --rebase origin master alternative to avoid merge commits git push origin -u branchName \u00a0Push your change as a new branch branchName git push origin somefeature push to the remote branch somefeature git pull origin somefeature pull to the remote branch somefeature git push origin --delete somefeature delete the remote branch somefeature"},{"location":"programming/git/git/#git-archaeology","title":"Git archaeology","text":"Command Comment git diff HEAD^^ HEAD \\&lt;filename&gt; to see the difference for a file \\&lt;filename&gt; between now and two commits back git diff 61a86561a1edb438963f5f22ec9e0773a0c4aacf HEAD \\&lt;filename&gt; to see the difference for a file \\&lt;filename&gt; between now and a specific commit git show e83c51633 Inspecting commit e83c51633 git grep -i term Greps entire repository below current directory git blame \\&lt;filename&gt; Show what revision and author last modified each line of a file. git log --oneline --grep \"term\" grepping commit messages git log -S 'term' \\&lt;filename&gt; Finding removed code (term) from file \\&lt;filename&gt; git checkout -b \\&lt;name&gt; \\&lt;hash&gt; Branch from arbitrary (earlier) hash. Recommended mechanism to inspect old code. remove the git shortlog --summary --numbered To show all users and the number of commits <ul> <li>bisect<pre><code>$ git bisect start\n$ git bisect good 89578ed  # this is a commit that worked\n$ git bisect bad HEAD      # last commit is broken\n  # now compile and/or run\n  # after that decide whether\n$ git bisect good\n  # or\n$ git bisect bad\n  # now compile and/or run\n  # after that decide whether\n$ git bisect good\n  # or\n$ git bisect bad\n  # iterate until commit is found\n</code></pre> </li> </ul> <p>This can even be automatized with <code>git bisect run &lt;script&gt;</code>. For this you write a script that returns zero/non-zero (success/failure).</p>"},{"location":"programming/git/git/#cherry-picking","title":"Cherry Picking","text":"<p>When? Let\u2019s say you are working in an project where you are making changes in a branch called <code>new-features</code>. You have already made a few commits but want to move just one of them into the master branch.</p> <p>How?   * Checkout the branch where you want to cherry pick the specific commits (<code>git checkout branchName</code>)   * Cherry pick from <code>new-features branch</code> (<code>git cherry-pick __commit-id__</code>)</p> Command Comment git cherry-pick commit-hash cherry pick the commit with hash commit-hash git cherry-pick commit-hash1 commit-hash2 cherry pick several commits git cherry-pick --continue When the cherry picking stoped by a conflicts and you have resolved it, then launch this command git cherry-pick --abort Cancel the operation and return to the pre-sequence state git cherry-pick -m 1 \\&lt;hash&gt; herry pick a merge instead of a commit <p>/!\\ Cherry picking is commonly discouraged in developer community. The main reason is because it creates a duplicate commit with the same changes and you lose the ability to track the history of the original commit. If you can merge, then you should use that instead of cherry picking. Use it with caution!</p>"},{"location":"programming/git/git/#extra","title":"Extra","text":"<p>Git branch design lesson How Can I Remove .ds_store Files from a Git Repository?</p>"},{"location":"programming/nextflow/nextflow/","title":"Nextflow","text":""},{"location":"programming/nextflow/nextflow/#cheat-sheet","title":"Cheat sheet","text":"<p>From https://github.com/danrlu/nextflow_cheatsheet</p>"},{"location":"programming/nextflow/nextflow/#dsl1-to-dsl2","title":"DSL1 to DSL2","text":""},{"location":"programming/nextflow/nextflow/#cheat-sheet_1","title":"Cheat sheet","text":""},{"location":"programming/nextflow/nextflow/#template","title":"Template","text":"<p>BiTeN A Bioinformatics Nextflow Pipeline Template</p>"},{"location":"programming/nextflow/nextflow/#pipeline","title":"Pipeline","text":"<p>Awesome Nextflow A curated list of Nextflow pipelines</p>"},{"location":"programming/perl/perl_code_profiler/","title":"How to profile your perl code","text":"<p>How to profile your perl code in order to point out the bottelneck performances. NYTProf is one of the library allowing such profiling. Let's look how to use it in 3 steps. </p>"},{"location":"programming/perl/perl_code_profiler/#step-one-install-nytprof","title":"Step one: install NYTProf","text":"<p><pre><code>cpanm install Devel::NYTProf\n</code></pre> You may want to have a look at the documentation. Either visit the metacpan or use perldoc: <pre><code>perldoc Devel::NYTProf\n</code></pre></p>"},{"location":"programming/perl/perl_code_profiler/#step-two-launch-your-script-in-behalf-of-nytprof","title":"Step two: launch your script in behalf of NYTProf","text":"<p><pre><code>perl -d:NYTProf my_perl_script.pl\n</code></pre> The script with rum much slowly as usual because NYTProf is catching lot of information in background. Iw will create a file called nytprof.out</p>"},{"location":"programming/perl/perl_code_profiler/#step-three-open-the-nytprof-output-file","title":"Step three: open the NYTProf output file","text":"<p><pre><code>nytprofhtml --open\n</code></pre> It will open an html file containing plenty of performance information. Enjoy it !</p>"},{"location":"programming/python/python/","title":"Python","text":""},{"location":"programming/python/python/#learn-python","title":"Learn python","text":"<p>Python Data Science Handbook</p>"},{"location":"programming/python/python/#how-to-create-a-package-on-pypi","title":"How to create a package on PyPI","text":"<p>This is how you create the PyPI package and upload to the PyPI repo</p> <ul> <li> <p>Prerequisite: </p> <ul> <li>Create an account</li> <li>Install required packages:</li> </ul> </li> </ul> <pre><code>pip install tqdm\npip install  twine\npip install setuptools wheel\n</code></pre> <ul> <li>Step 1, build the source distribution</li> </ul> <pre><code>python setup.py sdist\n</code></pre> <ul> <li>Step 2, build distribution  </li> </ul> <pre><code>python setup.py bdist_wheel --universal\n</code></pre> <ul> <li>Step 3, upload <pre><code>python -m twine upload dist/* \n</code></pre></li> </ul>"},{"location":"programming/python/python/#tips","title":"Tips","text":"<p>Everytime you want to upload a new version you have to increment the version number within the setup.py file.</p>"},{"location":"programming/r/r/","title":"R","text":""},{"location":"programming/r/r/#data-types-and-structure","title":"Data Types and Structure","text":"<p>Good introduction to Data Types and Structures in R. Data Types and Structure are very different than in other programing language so this reading can be really useful. https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures/</p>"},{"location":"resource/blogs/","title":"Blogs","text":"<ul> <li>Awesome blog bioinformatics</li> <li>Bioinformatics I/O </li> <li>NBIS</li> <li>Metagenomics Wiki</li> <li>Wiki stat</li> <li>Bioinformatics Workbook</li> <li>infoplatter</li> </ul>"},{"location":"resource/course/","title":"Course","text":""},{"location":"resource/course/#bash","title":"Bash","text":"<ul> <li>bash lecture</li> </ul>"},{"location":"resource/course/#bacterial-genomics-and-amr","title":"Bacterial Genomics and AMR","text":"<ul> <li>Bioinformatics Tutorials for Bacterial Genomics</li> </ul>"},{"location":"resource/course/#conda","title":"Conda","text":"<ul> <li>https://mivegec.pages.ird.fr/dainat/malbec-conda/</li> <li>https://nbisweden.github.io/workshop-conda/#1</li> </ul>"},{"location":"resource/course/#container","title":"Container","text":"<ul> <li>https://mivegec.pages.ird.fr/dainat/malbec-containers/ - Unix essential</li> </ul>"},{"location":"resource/course/#git","title":"Git","text":"<ul> <li>https://mivegec.pages.ird.fr/dainat/malbec-git/ - git essential</li> <li>learn-git-basics/ - base de git</li> <li>Version Control with Git in Rstudio - Git in Rstudio</li> <li>Happy Git and GitHub for the useR - Git oriented for R users</li> <li>Version Control with Git - from Software Carpentry</li> <li>Git+GitLab crash course - From Astre UMR</li> <li>Getting Git Right - Atlassian.com</li> </ul>"},{"location":"resource/course/#python","title":"Python","text":"<ul> <li>https://southgreenplatform.github.io/training_python/</li> <li>National Bioinformatics Infrastructure Sweden (NBIS) python course</li> <li>Introduction \u00e0 la programmation Python pour la biologie - in French</li> </ul>"},{"location":"resource/course/#r","title":"R","text":"<ul> <li>https://www.royfrancis.com/course-r/lab.html</li> </ul>"},{"location":"resource/course/#reproducible-research","title":"Reproducible Research","text":"<ul> <li>https://southgreenplatform.github.io/training_reproducible_research/</li> </ul>"},{"location":"resource/course/#unix","title":"Unix","text":"<ul> <li>https://mivegec.pages.ird.fr/dainat/malbec-unix-basics/ - Unix essential</li> </ul>"},{"location":"resource/course/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Galaxy Training! - Collection of tutorials developed and maintained by the worldwide Galaxy community</li> <li>Glittr a web app that list bioinformatics training materials available on GitHub and GitLab</li> <li>ERGA Knowledge Hub - A portal gathering and sharing educational materials on genomics and related topics</li> </ul>"},{"location":"resource/sites/","title":"Sites","text":"<ul> <li>Awesome awesomeness bioinformatics A list of awesome awesomeness related to bioinformatics and associated fields</li> <li>Awesome genome annotation Awesome genome/mitome/plastome/plastidome annotation tool list</li> <li>Awesome community bioinformatics A list of awesome bioinformatics communities</li> <li>Coordinate systems A cheat sheet about coordinate systems in bioinformatics</li> <li>ecSeq Bioinformatics</li> <li>Library types Overview of the different library types in RNAseq</li> </ul>"},{"location":"resource/sites/#git","title":"Git","text":"<ul> <li>Cheat sheet visualiation - Cliquer sur les zones permet de voir les commandes qui sont en relation avec, passer la souris sur une commande permet de voir une description. Multilingue</li> <li>Cheat sheet - github</li> </ul>"},{"location":"sequencing/sequencing/","title":"Sequencing","text":""},{"location":"sequencing/sequencing/#rna","title":"RNA","text":""},{"location":"sequencing/sequencing/#library-types","title":"Library types","text":""},{"location":"sequencing/sequencing/#resume","title":"Resume","text":"<p>Here a figure describing the different RNA-seq library types:</p> <p></p> <p>If you don't know the library type of your data you can use GUESSmyLT</p>"},{"location":"sequencing/sequencing/#library-prep-methods","title":"Library prep methods","text":"kit Description Paired Stranded Strand according to mRNA Strand according to <code>first strand</code> TruSeq RNA Sample Prep kit yes No fr-unstranded SMARTer ultralow RNA protocol yes No fr-unstranded All dUTP methods, NSR, NNSR yes Yes RF fr-firststrand TruSeq Stranded Total RNA Sample Prep Kit yes Yes RF fr-firststrand TruSeq Stranded mRNA Sample Prep Kit yes Yes RF fr-firststrand NEB Ultra Directional RNA Library Prep Kit yes Yes RF fr-firststrand Agilent SureSelect Strand-Specific yes Yes RF fr-firststrand Directional Illumina (Ligation) yes Yes FR fr-secondstrand \u00a0Standard SOLiD Yes yes FR fr-secondstrand ScriptSeq v2 RNA-Seq Library Preparation Kit yes Yes FR fr-secondstrand SMARTer Stranded Total RNA yes Yes FR fr-secondstrand \u00a0Encore Complete RNA-Seq Library Systems yes Yes FR fr-secondstrand NuGEN SoLo yes Yes FR fr-secondstrand Illumina ScriptSeq yes Yes FR fr-secondstrand SOLiD mate-pair protocol ff <p>--rf orientation are produced using the Illumina mate-pair protocol?</p>"},{"location":"sequencing/sequencing/#dna","title":"DNA","text":""},{"location":"sequencing/sequencing/#duplicates","title":"Duplicates","text":"<p>Duplicate reads are defined as originating from a single fragment of RNA/DNA. Duplicates can arise during sample preparation e.g. library construction using PCR (PCR duplication artifacts); single amplification cluster, incorrectly detected as multiple clusters by the optical sensor of the sequencing instrument (optical duplicates).  Intereting reading</p> <ul> <li> <p>PCR duplicate artifacts    Should we remove them. Short answer: NO excepted when using UMIs (e.g. deep sequencing / single cell / etc) details here</p> </li> <li> <p>optical duplicates     Optical, or more broadly Sequencing, duplicates are duplicates that appear clustered together spatially during sequencing and can arise from optical/imagine-processing artifacts or from bio-chemical processes during clonal amplification and sequencing</p> </li> </ul> <p>Tool to perform duplicates analysis (mark, remove): MarkDuplicates (Picard) Merge read and remove duplicates? See here</p>"},{"location":"statistics/statistics/","title":"Statistics","text":""},{"location":"statistics/statistics/#gnn","title":"GNN","text":"<ul> <li> <p>framework: Pytorch Geometric </p> <ul> <li>Supports Homogeneous and heterogeneous GNNs</li> <li>Multiple GNN blocks available</li> <li>Explainability pipelines included</li> <li>Well-documented</li> </ul> </li> <li> <p>LEarning Ressources</p> <ul> <li>Basics of GNNs : Sanchez-Lengeling et al. A Gentle Introduction to Graph Neural Networks\"; Distill 2021</li> <li>Bioinformatics Applications : Zhang et al. \"Graph Neural Netorks and their current applications in bioinformatics\", Front. Genet. 2021</li> <li>Network Biology : Zitnil et al. \"Current and future directions in network biology\" 2023</li> </ul> </li> </ul>"},{"location":"statistics/statistics/#shapiro-wilcoxon-student","title":"Shapiro / Wilcoxon / Student","text":"<p>One common activity in statistics is to test if two independant samples are different between each other.  </p> <ul> <li>First we must check if the distribution follow the Normal distribution with <code>Shapiro</code> test. Depending this result we will not apply the same test.  </li> <li>If test is significant =&gt; does not follow the Normal distribution, we must then use the <code>Wilcoxon</code> test.</li> <li>If test not significant =&gt; the data follow normal distribution, we must use the <code>Student</code> test. (N&gt;=20)  </li> </ul>"},{"location":"statistics/statistics/#general-ressources","title":"General Ressources","text":"<ul> <li>seeing-theory - A visual introduction to probability and statistics</li> <li>Modern Statistics for Modern Biology</li> <li>Scientists rise up against statistical significance</li> <li>methodologie - fr</li> <li>bioinfo-fr - fr</li> <li>Introduction aux Statistiques - fr</li> </ul>"}]}